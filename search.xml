<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VJudge--Rightmost Digit</title>
      <link href="/2020/06/30/Rightmost%20Digit/"/>
      <url>/2020/06/30/Rightmost%20Digit/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Rightmost-Digit"><a href="#题目-Rightmost-Digit" class="headerlink" title="题目 -  Rightmost Digit"></a>题目 -  Rightmost Digit</h2><p>Given a positive integer N, you should output the most right digit of N^N.</p><p>Input</p><p>The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case contains a single positive integer N(1&lt;=N&lt;=1,000,000,000).</p><p>Output</p><p>For each test case, you should output the rightmost digit of N^N.</p><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>Hint</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In the first <span class="keyword">case</span>, <span class="number">3</span> * <span class="number">3</span> * <span class="number">3</span> = <span class="number">27</span>, so the rightmost digit is <span class="number">7.</span></span><br><span class="line">In the second <span class="keyword">case</span>, <span class="number">4</span> * <span class="number">4</span> * <span class="number">4</span> * <span class="number">4</span> = <span class="number">256</span>, so the rightmost digit is <span class="number">6.</span></span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>求n的平方最右边的数字。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>需要用到快速幂以及取模。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fastPow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> base = a % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n) &#123;</span><br><span class="line"><span class="keyword">if</span>(n &amp; <span class="number">1</span>) </span><br><span class="line">res = res * base % <span class="number">10</span>;</span><br><span class="line">base = base * base % <span class="number">10</span>;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fastPow(n, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--A sequence of numbers</title>
      <link href="/2020/06/29/A%20sequence%20of%20numbers/"/>
      <url>/2020/06/29/A%20sequence%20of%20numbers/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-A-sequence-of-numbers"><a href="#题目-A-sequence-of-numbers" class="headerlink" title="题目 -  A sequence of numbers"></a>题目 -  A sequence of numbers</h2><p>Xinlv wrote some sequences on the paper a long time ago, they might be arithmetic or geometric sequences. The numbers are not very clear now, and only the first three numbers of each sequence are recognizable. Xinlv wants to know some numbers in these sequences, and he needs your help.</p><p>Input</p><p>The first line contains an integer N, indicting that there are N sequences. Each of the following N lines contain four integers. The first three indicating the first three numbers of the sequence, and the last one is K, indicating that we want to know the K-th numbers of the sequence.</p><p>You can assume 0 &lt; K &lt;= 10^9, and the other three numbers are in the range [0, 2^63). All the numbers of the sequences are integers. And the sequences are non-decreasing.</p><p>Output</p><p>Output one line for each test case, that is, the K-th number module (%) 200907.</p><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>现在有一个由整数组成的序列，可能是等差数列，也可能是等比数列，但是只给出前3个数，要求你求数列中第k个数% 200907的结果。所给数列是一个非递减数列。</p><p>输入：首先是一个t表示输入的实例个数，以下t行每行代表一个实例。每行包括4个整数，前3个整数在[0, 2^63)范围内，表示数列的头3个数，第4个数是k表示要求的数列中的第k个数。其中0 &lt; k &lt;= 10^9。</p><p>输出：输出数列中第k个数%200907的结果。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>需要用到快速幂算法，注意一下使用long long型。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200907</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">fun</span><span class="params">(ll a, ll b, ll k)</span> </span>&#123;</span><br><span class="line">ll base = b / a;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k) &#123;</span><br><span class="line"><span class="keyword">if</span>(k &amp; <span class="number">1</span>) </span><br><span class="line">res = (res * base) % N;</span><br><span class="line">base = (base * base) % N;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ll a, b, c, k, res;</span><br><span class="line"><span class="keyword">int</span> t; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d%I64d"</span>, &amp;a, &amp;b, &amp;c, &amp;k);</span><br><span class="line"><span class="keyword">if</span>(a + c == <span class="number">2</span> * b)</span><br><span class="line">res = (a+(k - <span class="number">1</span>)*(b - a)) % N;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">res = a * fun(a, b, k - <span class="number">1</span>) % N;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, res);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode--回文数</title>
      <link href="/2020/04/12/LeetCode--%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>/2020/04/12/LeetCode--%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="9-回文数"><a href="#9-回文数" class="headerlink" title="[9]:回文数"></a>[9]:回文数</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p><a href="https://leetcode-cn.com/problems/two-sum/description/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/description/</a></p><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>我是把整数转化为字符串做的。</p><p>如果用整数的话，可能会有溢出，只翻转一半的数字。</p><p>还是得不断学习鸭。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x != <span class="number">0</span> &amp;&amp; x % <span class="number">10</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode--整数反转</title>
      <link href="/2020/04/11/LeetCode--%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/2020/04/11/LeetCode--%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="[7]:整数反转"></a>[7]:整数反转</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p><a href="https://leetcode-cn.com/problems/reverse-integer/description/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer/description/</a></p><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>看别人的代码不得不感慨！</p><p>太强了！！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x) &#123;</span><br><span class="line">             ans = ans * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">             x /= <span class="number">10</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &gt; <span class="number">2147483647</span> || ans&lt;<span class="number">-2147483648</span>? <span class="number">0</span>:ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode--两数之和</title>
      <link href="/2020/04/09/LeetCode--%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2020/04/09/LeetCode--%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="[1]:两数之和"></a>[1]:两数之和</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p><a href="https://leetcode-cn.com/problems/two-sum/description/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/description/</a></p><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>直接暴力过的，看了题解之后发现可以用哈希表。</p><p>一次哈希速度是最快的。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1:"></a>代码1:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); ++j)</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target &amp;&amp; i != j) </span><br><span class="line">                    a = &#123;i, j&#125;;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码2："><a href="#代码2：" class="headerlink" title="代码2："></a>代码2：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一次哈希</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(m.<span class="built_in">find</span>(t) != m.<span class="built_in">end</span>()) </span><br><span class="line">                <span class="keyword">return</span> &#123;m[t], i&#125;;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                m[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码3："><a href="#代码3：" class="headerlink" title="代码3："></a>代码3：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两次哈希</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            m[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m.<span class="built_in">find</span>(target - nums[i]) != m.<span class="built_in">end</span>() &amp;&amp; m[target - nums[i]] != i) </span><br><span class="line">                <span class="keyword">return</span> &#123;i, m[target - nums[i]]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash-table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode--两数之和</title>
      <link href="/2020/04/09/LeetCode--%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/2020/04/09/LeetCode--%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="[1]:两数之和"></a>[1]:两数之和</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p><a href="https://leetcode-cn.com/problems/two-sum/description/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/description/</a></p><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>直接暴力过的，看了题解之后发现可以用哈希表。</p><p>一次哈希速度是最快的。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1:"></a>代码1:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); ++j)</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target &amp;&amp; i != j) </span><br><span class="line">                    a = &#123;i, j&#125;;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码2："><a href="#代码2：" class="headerlink" title="代码2："></a>代码2：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一次哈希</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(m.<span class="built_in">find</span>(t) != m.<span class="built_in">end</span>()) </span><br><span class="line">                <span class="keyword">return</span> &#123;m[t], i&#125;;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                m[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码3："><a href="#代码3：" class="headerlink" title="代码3："></a>代码3：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两次哈希</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            m[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m.<span class="built_in">find</span>(target - nums[i]) != m.<span class="built_in">end</span>() &amp;&amp; m[target - nums[i]] != i) </span><br><span class="line">                <span class="keyword">return</span> &#123;i, m[target - nums[i]]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash-table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中substr函数用法</title>
      <link href="/2020/03/27/C++substr%E5%87%BD%E6%95%B0/"/>
      <url>/2020/03/27/C++substr%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="话不多说直接上模板："><a href="#话不多说直接上模板：" class="headerlink" title="话不多说直接上模板："></a>话不多说直接上模板：</h3><h6 id="substr-start-length-length可填可不填，start必填"><a href="#substr-start-length-length可填可不填，start必填" class="headerlink" title="substr(start, length),length可填可不填，start必填"></a>substr(start, length),length可填可不填，start必填</h6><h6 id="即返回一个从指定位置开始并具有指定长度的子字符串，字符串中第一个字符的索引为0"><a href="#即返回一个从指定位置开始并具有指定长度的子字符串，字符串中第一个字符的索引为0" class="headerlink" title="即返回一个从指定位置开始并具有指定长度的子字符串，字符串中第一个字符的索引为0."></a>即返回一个从指定位置开始并具有指定长度的子字符串，字符串中第一个字符的索引为0.</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"hello, world"</span>; </span><br><span class="line"><span class="built_in">string</span> str1 = str.substr(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="结果为hello"><a href="#结果为hello" class="headerlink" title="结果为hello."></a>结果为hello.</h6>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="/2020/03/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/"/>
      <url>/2020/03/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="学习笔记-算法"><a href="#学习笔记-算法" class="headerlink" title="学习笔记-算法"></a>学习笔记-算法</h2><h4 id="主要是方便我以后复习，以下内容可能有些不严谨。"><a href="#主要是方便我以后复习，以下内容可能有些不严谨。" class="headerlink" title="主要是方便我以后复习，以下内容可能有些不严谨。"></a>主要是方便我以后复习，以下内容可能有些不严谨。</h4><h4 id="一、辗转相除法（欧几里德定理）"><a href="#一、辗转相除法（欧几里德定理）" class="headerlink" title="一、辗转相除法（欧几里德定理）"></a>一、辗转相除法（欧几里德定理）</h4><p>​    用来求最大公约是和最小公倍数</p><h5 id="gcd-b-a-b-lcm-a-b-gcd"><a href="#gcd-b-a-b-lcm-a-b-gcd" class="headerlink" title="gcd = (b, a % b)        lcm = a * b / gcd"></a>gcd = (b, a % b)        lcm = a * b / gcd</h5><p>​    例如：a                b                c(a % b)</p><p>​                65            15                5</p><p>​                15             5                  0</p><p>​                所以最大公约数为5</p><h5 id="伪代码："><a href="#伪代码：" class="headerlink" title="伪代码："></a>伪代码：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a &lt; b) &#123;</span><br><span class="line">    t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line">d = a * b;</span><br><span class="line">c = a % b;</span><br><span class="line"><span class="keyword">while</span>(c != <span class="number">0</span>) &#123;</span><br><span class="line">    a = b;</span><br><span class="line">    b = c;</span><br><span class="line">    c = a % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"最大公约数:"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"最小公倍数:"</span>&lt;&lt;d / b&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h4 id="二、并查集"><a href="#二、并查集" class="headerlink" title="二、并查集"></a>二、并查集</h4><p>一开始我想的是DFS，但是DFS一直没学会呜呜呜，这个题很像染色定理，然后看了讲解发现这个题还可以用并查集做（明明学过并查集为什么我没想到呢）。</p><h4 id="三、DFS"><a href="#三、DFS" class="headerlink" title="三、DFS"></a>三、DFS</h4><p>当时第一反应是并查集，写完之后不对，又读了一遍题目，题目要求是认识的人不能在一个考场，如果用并查集解决的话应该是认识的人在一个考场，最后发现是用DFS。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shadowsocks翻墙教程</title>
      <link href="/2020/03/07/shadowsocks/"/>
      <url>/2020/03/07/shadowsocks/</url>
      
        <content type="html"><![CDATA[<h2 id="shadowsocks翻墙教程"><a href="#shadowsocks翻墙教程" class="headerlink" title="shadowsocks翻墙教程"></a>shadowsocks翻墙教程</h2><p>这是我是参考<a href="https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_shadowsocks_tutorial.md" target="_blank" rel="noopener">翻墙教程</a>，分享一下。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--放苹果</title>
      <link href="/2020/02/19/NOI--%E6%94%BE%E8%8B%B9%E6%9E%9C/"/>
      <url>/2020/02/19/NOI--%E6%94%BE%E8%8B%B9%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="27-单词翻转"><a href="#27-单词翻转" class="headerlink" title="27:单词翻转"></a>27:单词翻转</h2><h2 id="题目-放苹果"><a href="#题目-放苹果" class="headerlink" title="题目:放苹果"></a>题目:放苹果</h2><p>描述</p><p>把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？（用K表示）5，1，1和1，5，1 是同一种分法。</p><p>输入</p><p>第一行是测试数据的数目t（0 &lt;= t &lt;= 20）。以下每行均包含二个整数M和N，以空格分开。1&lt;=M，N&lt;=10。</p><p>输出</p><p>对输入的每组数据M和N，用一行输出相应的K。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="解题"><a href="#解题" class="headerlink" title="解题:"></a>解题:</h3><p>m个苹果放在n个盘中里，分类讨论：</p><p>1、如果m &lt; n ,至少会有n-m个盘子是空的，所以忽略这些盘子，f(m, n) = f(m, m)</p><p>2、如果m &gt;= n,因为有的盘子为空有的不为空，所以总分法 = 有空盘子 + 无空盘子，有空盘子时，至少有一个空盘子所以等于f(m,n-1),没有空盘子时候，至少每个盘子里都会放一个苹果还剩m-n个苹果放在n个盘子里f(m-n,n).</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> f(x, x);</span><br><span class="line"><span class="keyword">if</span>(x &gt;= y) <span class="keyword">return</span> f(x, y - <span class="number">1</span>) + f(x - y, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, m, n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> ans = f(m, n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--拯救行动</title>
      <link href="/2020/02/15/NOI--%E6%8B%AF%E6%95%91%E8%A1%8C%E5%8A%A8/"/>
      <url>/2020/02/15/NOI--%E6%8B%AF%E6%95%91%E8%A1%8C%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="题目–拯救行动"><a href="#题目–拯救行动" class="headerlink" title="题目–拯救行动"></a>题目–拯救行动</h2><p>描述</p><p>公主被恶人抓走，被关押在牢房的某个地方。牢房用N*M (N, M &lt;= 200)的矩阵来表示。矩阵中的每项可以代表道路（@）、墙壁（#）、和守卫（x）。<br>英勇的骑士（r）决定孤身一人去拯救公主（a）。我们假设拯救成功的表示是“骑士到达了公主所在的位置”。由于在通往公主所在位置的道路中可能遇到守卫，骑士一旦遇到守卫，必须杀死守卫才能继续前进。<br>现假设骑士可以向上、下、左、右四个方向移动，每移动一个位置需要1个单位时间，杀死一个守卫需要花费额外的1个单位时间。同时假设骑士足够强壮，有能力杀死所有的守卫。</p><p>给定牢房矩阵，公主、骑士和守卫在矩阵中的位置，请你计算拯救行动成功需要花费最短时间。</p><p>输入</p><p>第一行为一个整数S，表示输入的数据的组数（多组输入）<br>随后有S组数据，每组数据按如下格式输入<br>1、两个整数代表N和M, (N, M &lt;= 200).<br>2、随后N行，每行有M个字符。”@”代表道路，”a”代表公主，”r”代表骑士，”x”代表守卫, “#”代表墙壁。</p><p>输出</p><p>如果拯救行动成功，输出一个整数，表示行动的最短时间。<br>如果不可能成功，输出”Impossible”</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span></span><br><span class="line">#@#####@</span><br><span class="line">#@a#@@r@</span><br><span class="line">#@@<span class="meta">#x@@@</span></span><br><span class="line">@@#@@#@#</span><br><span class="line">#@@@##@@</span><br><span class="line">@#@@@@@@</span><br><span class="line">@@@@@@@@ </span><br><span class="line"><span class="number">13</span> <span class="number">40</span></span><br><span class="line">@x@@#<span class="meta">#x@#x@x#xxxx##@#x@x@@#x#@#x#@@x@#@x</span></span><br><span class="line">xx##<span class="meta">#x@x#@@##xx@@@#@x@@#x@xxx@@#x@#x@@x@</span></span><br><span class="line">#@x#@x<span class="meta">#x#@@##@@x#@xx#xxx@@x##@@@#@x@@x@x</span></span><br><span class="line">@#<span class="meta">#x@@@x#xx#@@#xxxx#@@x@x@#@x@@@x@#@#x@#</span></span><br><span class="line">@<span class="meta">#xxxxx##@@x##x@xxx@@#x@x####@@@x#x##@#@</span></span><br><span class="line"><span class="meta">#xxx#@#x##xxxx@@#xx@@@x@xxx#@#xxx@x#####</span></span><br><span class="line"><span class="meta">#x@xxxx#@x@@@@##@x#xx#xxx@#xx#@#####x#@x</span></span><br><span class="line">xx##@#@x#<span class="meta">#x##x#@x#@a#xx@##@#@##xx@#@@x@x</span></span><br><span class="line">x<span class="meta">#x#@x@#x#@##@xrx@x#xxxx@##x##xx#@#x@xx@</span></span><br><span class="line"><span class="meta">#x@@#@###x##x@x#@@#@@x@x@@xx@@@@##@@x@@x</span></span><br><span class="line">x<span class="meta">#xx@x###@xxx#@#x#@@###@#@##@x#@x@#@@#@@</span></span><br><span class="line">#@<span class="meta">#x@x#x#x###@x@@xxx####x@x##@x####xx#@x</span></span><br><span class="line"><span class="meta">#x#@x#x######@@#x@#xxxx#xx@@@#xx#x#####@</span></span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>​    之前是用单纯的BFS，遇到x时step+2，遇到@时step+1，这样做不行然后我看了别人的博客，因为这样做求得的只是最短路的时间而不是最短时间，说明我对BFS理解还不是很深刻，所以这就不是一道常规的BFS题目了，有两种解题方式，一种是把x的两秒当成走两步，另一种是用BFS+优先队列。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> maze[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, <span class="built_in">step</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">step</span> &gt; a.<span class="built_in">step</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line">node st, ne;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">priority_queue &lt; node &gt; q;</span><br><span class="line">q.push(st);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">st = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">ne.x = st.x + dir[i][<span class="number">0</span>];</span><br><span class="line">ne.y = st.y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(ne.x &gt;= <span class="number">1</span> &amp;&amp; ne.x &lt;= n &amp;&amp; ne.y &gt;= <span class="number">1</span> &amp;&amp; ne.y &lt;=m &amp;&amp; !vis[ne.x][ne.y]) &#123;</span><br><span class="line"><span class="keyword">if</span>(maze[ne.x][ne.y] == <span class="string">'@'</span>) &#123;</span><br><span class="line">ne.<span class="built_in">step</span> = st.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">q.push(ne);</span><br><span class="line">vis[ne.x][ne.y] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maze[ne.x][ne.y] == <span class="string">'x'</span>) &#123;</span><br><span class="line">ne.<span class="built_in">step</span> = st.<span class="built_in">step</span> + <span class="number">2</span>;</span><br><span class="line">q.push(ne);</span><br><span class="line">vis[ne.x][ne.y] = <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maze[ne.x][ne.y] == <span class="string">'a'</span>) &#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> st.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maze[ne.x][ne.y] == <span class="string">'#'</span>) &#123;</span><br><span class="line">vis[ne.x][ne.y] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">while</span>(s--) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;maze[i][j];</span><br><span class="line"><span class="keyword">if</span>(maze[i][j] == <span class="string">'r'</span>) &#123;</span><br><span class="line">st.x = i;</span><br><span class="line">st.y = j;</span><br><span class="line">st.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">vis[st.x][st.y] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = BFS();</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广搜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--鸣人和佐助</title>
      <link href="/2020/02/15/NOI--%E9%B8%A3%E4%BA%BA%E5%92%8C%E4%BD%90%E5%8A%A9/"/>
      <url>/2020/02/15/NOI--%E9%B8%A3%E4%BA%BA%E5%92%8C%E4%BD%90%E5%8A%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="27-鸣人和佐助"><a href="#27-鸣人和佐助" class="headerlink" title="27:鸣人和佐助"></a>27:鸣人和佐助</h2><p>描述</p><p>佐助被大蛇丸诱骗走了，鸣人在多少时间内能追上他呢？</p><p><img src="http://media.openjudge.cn/images/upload/1372385324.jpg" alt="img"></p><p>已知一张地图（以二维矩阵的形式表示）以及佐助和鸣人的位置。地图上的每个位置都可以走到，只不过有些位置上有大蛇丸的手下，需要先打败大蛇丸的手下才能到这些位置。鸣人有一定数量的查克拉，每一个单位的查克拉可以打败一个大蛇丸的手下。假设鸣人可以往上下左右四个方向移动，每移动一个距离需要花费1个单位时间，打败大蛇丸的手下不需要时间。如果鸣人查克拉消耗完了，则只可以走到没有大蛇丸手下的位置，不可以再移动到有大蛇丸手下的位置。佐助在此期间不移动，大蛇丸的手下也不移动。请问，鸣人要追上佐助最少需要花费多少时间？</p><p>输入</p><p>输入的第一行包含三个整数：M，N，T。代表M行N列的地图和鸣人初始的查克拉数量T。0 &lt; M,N &lt; 200，0 ≤ T &lt; 10<br>后面是M行N列的地图，其中@代表鸣人，+代表佐助。*代表通路，#代表大蛇丸的手下。</p><p>输出</p><p>输出包含一个整数R，代表鸣人追上佐助最少需要花费的时间。如果鸣人无法追上佐助，则输出-1。</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">样例输入1</span><br><span class="line">4 4 1</span><br><span class="line">#@##</span><br><span class="line">**##</span><br><span class="line">###+</span><br><span class="line">****</span><br><span class="line"></span><br><span class="line">样例输入2</span><br><span class="line">4 4 2</span><br><span class="line">#@##</span><br><span class="line">**##</span><br><span class="line">###+</span><br><span class="line">****</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样例输出1</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line">样例输出2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>之前是准备用二维数组来标记，但是这样的话不行，如果测试样例是这样的话:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 6 1</span><br><span class="line">@#**** </span><br><span class="line">*#*###</span><br><span class="line">***##+</span><br></pre></td></tr></table></figure><p>输出结果为-1,实际上正确结果应该是11。所以在标记数组上还要加一个查克拉的数量状态。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m, n, t;</span><br><span class="line"><span class="keyword">char</span> maze[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">210</span>][<span class="number">210</span>][<span class="number">15</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, t, <span class="built_in">step</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line">node st, en, ne;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt;q;</span><br><span class="line">q.push(st);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">st = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(st.x == en.x &amp;&amp; st.y == en.y) &#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> st.<span class="built_in">step</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">ne.x = st.x + dir[i][<span class="number">0</span>];</span><br><span class="line">ne.y = st.y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(ne.x &gt;= <span class="number">1</span> &amp;&amp; ne.x &lt;= m &amp;&amp; ne.y &gt;= <span class="number">1</span> &amp;&amp; ne.y &lt;= n) &#123;</span><br><span class="line"><span class="keyword">if</span>(maze[ne.x][ne.y] == <span class="string">'#'</span> &amp;&amp; st.t &gt;= <span class="number">1</span> &amp;&amp; !vis[ne.x][ne.y][st.t<span class="number">-1</span>]) &#123;</span><br><span class="line">ne.t = st.t - <span class="number">1</span>;</span><br><span class="line">ne.<span class="built_in">step</span> = st.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">q.push(ne);</span><br><span class="line">vis[ne.x][ne.y][ne.t] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maze[ne.x][ne.y] != <span class="string">'#'</span> &amp;&amp; !vis[ne.x][ne.y][st.t]) &#123;</span><br><span class="line">ne.t = st.t;</span><br><span class="line">ne.<span class="built_in">step</span> = st.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">q.push(ne);</span><br><span class="line">vis[ne.x][ne.y][ne.t] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;t;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;maze[i][j];</span><br><span class="line"><span class="keyword">if</span>(maze[i][j] == <span class="string">'@'</span>) &#123;</span><br><span class="line">st.x = i;</span><br><span class="line">st.y = j;</span><br><span class="line">st.t = t;</span><br><span class="line">st.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">vis[st.x][st.y][t] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maze[i][j] == <span class="string">'+'</span>) &#123;</span><br><span class="line">en.x = i;</span><br><span class="line">en.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = BFS();</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广搜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--抓住那头牛</title>
      <link href="/2020/02/14/NOI--%E6%8A%93%E4%BD%8F%E9%82%A3%E5%A4%B4%E7%89%9B/"/>
      <url>/2020/02/14/NOI--%E6%8A%93%E4%BD%8F%E9%82%A3%E5%A4%B4%E7%89%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="27-抓住那头牛"><a href="#27-抓住那头牛" class="headerlink" title="27:抓住那头牛"></a>27:抓住那头牛</h2><p>描述</p><p>农夫知道一头牛的位置，想要抓住它。农夫和牛都位于数轴上，农夫起始位于点N(0&lt;=N&lt;=100000)，牛位于点K(0&lt;=K&lt;=100000)。农夫有两种移动方式：</p><p>1、从X移动到X-1或X+1，每次移动花费一分钟</p><p>2、从X移动到2*X，每次移动花费一分钟</p><p>假设牛没有意识到农夫的行动，站在原地不动。农夫最少要花多少时间才能抓住牛？</p><p>输入</p><p>两个整数，N和K</p><p>输出</p><p>一个整数，农夫抓到牛所要花费的最小分钟数</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 17</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    虽然是道很简单的搜索题，但坑点很多</p><p>​    1.判断牛在人的左边还是右边</p><p>​    2.数组开大一点</p><p>​    3.判断是否越界</p><p>​    否则会一直RE</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, t;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//之前开的1e5 + 10,很神奇，反正是不行</span></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1000010</span>];</span><br><span class="line">node st, ne, en;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span> &lt;node&gt; q;</span><br><span class="line">q.push(st);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">st = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(st.x == en.x) <span class="keyword">return</span> st.t;</span><br><span class="line">ne.x = st.x + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//要判断点是否在范围内</span></span><br><span class="line"><span class="keyword">if</span>(ne.x &gt;= <span class="number">0</span> &amp;&amp; !vis[ne.x] &amp;&amp; ne.x &lt;= <span class="number">100000</span>) &#123;</span><br><span class="line">ne.t = st.t + <span class="number">1</span>; </span><br><span class="line">q.push(ne);</span><br><span class="line">vis[ne.x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ne.x = st.x - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ne.x &gt;= <span class="number">0</span> &amp;&amp; !vis[ne.x] &amp;&amp; ne.x &lt;= <span class="number">100000</span>) &#123;</span><br><span class="line">ne.t = st.t + <span class="number">1</span>;</span><br><span class="line">q.push(ne);</span><br><span class="line">vis[ne.x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ne.x = st.x * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(ne.x &gt;= <span class="number">0</span> &amp;&amp; !vis[ne.x] &amp;&amp; ne.x &lt;= <span class="number">100000</span>) &#123;</span><br><span class="line">ne.t = st.t + <span class="number">1</span>;</span><br><span class="line">q.push(ne);</span><br><span class="line">vis[ne.x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="comment">//这里也要注意</span></span><br><span class="line"><span class="keyword">if</span>(n &gt;= k) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n-k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">st.x = n;</span><br><span class="line">st.t = <span class="number">0</span>;</span><br><span class="line">en.x = k;</span><br><span class="line">vis[st.x] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;BFS()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广搜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Billboard</title>
      <link href="/2020/02/11/VJudge--Billboard/"/>
      <url>/2020/02/11/VJudge--Billboard/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Billboard"><a href="#题目-Billboard" class="headerlink" title="题目 - Billboard"></a>题目 - Billboard</h2><p>At the entrance to the university, there is a huge rectangular billboard of size h*w (h is its height and w is its width). The board is the place where all possible announcements are posted: nearest programming competitions, changes in the dining room menu, and other important information.</p><p>On September 1, the billboard was empty. One by one, the announcements started being put on the billboard.</p><p>Each announcement is a stripe of paper of unit height. More specifically, the i-th announcement is a rectangle of size 1 * wi.</p><p>When someone puts a new announcement on the billboard, she would always choose the topmost possible position for the announcement. Among all possible topmost positions she would always choose the leftmost one.</p><p>If there is no valid location for a new announcement, it is not put on the billboard (that’s why some programming contests have no participants from this university).</p><p>Given the sizes of the billboard and the announcements, your task is to find the numbers of rows in which the announcements are placed.</p><p>Input</p><p>There are multiple cases (no more than 40 cases).</p><p>The first line of the input file contains three integer numbers, h, w, and n (1 &lt;= h,w &lt;= 10^9; 1 &lt;= n &lt;= 200,000) - the dimensions of the billboard and the number of announcements.</p><p>Each of the next n lines contains an integer number wi (1 &lt;= wi &lt;= 10^9) - the width of i-th announcement.</p><p>Output</p><p>For each announcement (in the order they are given in the input file) output one number - the number of the row in which this announcement is placed. Rows are numbered from 1 to h, starting with the top row. If an announcement can’t be put on the billboard, output “-1” for this announcement.</p><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>​    第一行输入的前两个数是给的布告栏的高和宽，第三个数是有几个通知，每个通知的的高都是单位长度，下面几行是每个通知的宽要求输出每个通知分别贴在第几行。优先选择最上边和最左边的地方贴。</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    其实一开始是没有想到用线段树来解题，因为感觉没办法用线段树？我的常规思路是把宽度来当成一个区间，实际上这个题目是把高度当区间来建树，感觉还是挺有收获的，写出来之后一直RE，最后发现我把l，r写成了r,l。这种手误情况还是要尽量避免哇。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h, w;</span><br><span class="line"><span class="keyword">int</span> tree[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">tree[u] = <span class="built_in">max</span>(tree[u &lt;&lt; <span class="number">1</span>], tree[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">tree[u] = w;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">BuildTree(l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line">BuildTree(mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">push_up(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u, <span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( l == r) &#123;</span><br><span class="line">tree[u] -= x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ans &lt;= mid) Update(x, l, mid, u &lt;&lt; <span class="number">1</span>, ans);</span><br><span class="line"><span class="keyword">else</span> Update(x, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, ans);</span><br><span class="line">push_up(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[u &lt;&lt; <span class="number">1</span>] &gt;= x) ans = Query(x, l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tree[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &gt;= x) ans = Query(x, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;h, &amp;w, &amp;n)) &#123;</span><br><span class="line"><span class="keyword">if</span>(h &gt; n) h = n;</span><br><span class="line">BuildTree(<span class="number">1</span>, h, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="number">1</span>] &lt; x) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = Query(x, <span class="number">1</span>, h, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">Update(x, <span class="number">1</span>, h, <span class="number">1</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--I Hate It</title>
      <link href="/2020/02/11/VJudge--I%20Hate%20It/"/>
      <url>/2020/02/11/VJudge--I%20Hate%20It/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-I-Hate-It"><a href="#题目-I-Hate-It" class="headerlink" title="题目 - I Hate It"></a>题目 - I Hate It</h2><p>很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。<br>这让很多学生很反感。</p><p>不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。</p><p>Input</p><p>本题目包含多组测试，请处理到文件结束。<br>在每个测试的第一行，有两个正整数 N 和 M ( 0&lt;N&lt;=200000,0&lt;M&lt;5000 )，分别代表学生的数目和操作的数目。<br>学生ID编号分别从1编到N。<br>第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。<br>接下来有M行。每一行有一个字符 C (只取’Q’或’U’) ，和两个正整数A，B。<br>当C为’Q’的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。<br>当C为’U’的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。</p><p>Output</p><p>对于每一次询问操作，在一行里面输出最高成绩。</p><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Q <span class="number">1</span> <span class="number">5</span></span><br><span class="line">U <span class="number">3</span> <span class="number">6</span></span><br><span class="line">Q <span class="number">3</span> <span class="number">4</span></span><br><span class="line">Q <span class="number">4</span> <span class="number">5</span></span><br><span class="line">U <span class="number">2</span> <span class="number">9</span></span><br><span class="line">Q <span class="number">1</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>Hint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Huge input,the C function scanf() will work better than cin</span><br></pre></td></tr></table></figure><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>​    线段树的基本操作。</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    TLE，然后我加了个algorithm头文件就AC了，迷惑行为？？</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[u]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">BuildTree(l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line">BuildTree(mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">tree[u] = <span class="built_in">max</span>(tree[u &lt;&lt; <span class="number">1</span>], tree[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class="keyword">return</span> tree[u];</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= mid) ans = <span class="built_in">max</span>(ans, Query(a, b, l, mid, u &lt;&lt; <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(b &gt; mid) ans = <span class="built_in">max</span>(ans, Query(a, b, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == a &amp;&amp; r == a) &#123;</span><br><span class="line">tree[u] = b;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= mid) Update(a, b, l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> Update(a, b, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">tree[u] = <span class="built_in">max</span>(tree[u &lt;&lt; <span class="number">1</span>], tree[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">BuildTree(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(str, <span class="number">0</span> ,<span class="keyword">sizeof</span>(str));</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> ans = Query(a, b, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'U'</span>) &#123;</span><br><span class="line">Update(a, b, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Intervals</title>
      <link href="/2020/02/09/VJudge--Intervals/"/>
      <url>/2020/02/09/VJudge--Intervals/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Intervals"><a href="#题目-Intervals" class="headerlink" title="题目 - Intervals"></a>题目 - Intervals</h2><p>There is given the series of n closed intervals [ai; bi], where i=1,2,…,n. The sum of those intervals may be represented as a sum of closed pairwise non−intersecting intervals. The task is to find such representation with the minimal number of intervals. The intervals of this representation should be written in the output file in acceding order. We say that the intervals [a; b] and [c; d] are in ascending order if, and only if a &lt;= b &lt; c &lt;= d.<br>Task<br>Write a program which:<br>reads from the std input the description of the series of intervals,<br>computes pairwise non−intersecting intervals satisfying the conditions given above,<br>writes the computed intervals in ascending order into std output</p><p>Input</p><p>In the first line of input there is one integer n, 3 &lt;= n &lt;= 50000. This is the number of intervals. In the (i+1)−st line, 1 &lt;= i &lt;= n, there is a description of the interval [ai; bi] in the form of two integers ai and bi separated by a single space, which are respectively the beginning and the end of the interval,1 &lt;= ai &lt;= bi &lt;= 1000000.</p><p>Output</p><p>The output should contain descriptions of all computed pairwise non−intersecting intervals. In each line should be written a description of one interval. It should be composed of two integers, separated by a single space, the beginning and the end of the interval respectively. The intervals should be written into the output in ascending order.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5 6</span><br><span class="line">1 4</span><br><span class="line">10 10</span><br><span class="line">6 9</span><br><span class="line">8 10</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 4</span><br><span class="line">5 10</span><br></pre></td></tr></table></figure><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>​    区间覆盖，给很多线段，合并线段，使合并后的间隔最小。</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    写这个题目参考了今天暑假不AC</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> start, <span class="built_in">end</span>;</span><br><span class="line">&#125;a[<span class="number">50005</span>], b[<span class="number">5005</span>];</span><br><span class="line"><span class="comment">//这里</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.start &lt; b.start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a[i].start, &amp;a[i].<span class="built_in">end</span>); </span><br><span class="line">&#125;</span><br><span class="line">sort(a, a + n, cmp);</span><br><span class="line">node last = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].start &lt;= last.<span class="built_in">end</span>) &#123;</span><br><span class="line">                <span class="comment">//之前一直在这里wa，需要加一个判断条件(因为前一个线段可能包含后一个线段)</span></span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">end</span> &gt; last.<span class="built_in">end</span>)</span><br><span class="line">last.<span class="built_in">end</span> = a[i].<span class="built_in">end</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i].start &gt; last.<span class="built_in">end</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;last.start&lt;&lt;<span class="string">" "</span>&lt;&lt;last.<span class="built_in">end</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">last = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;last.start&lt;&lt;<span class="string">" "</span>&lt;&lt;last.<span class="built_in">end</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Task</title>
      <link href="/2020/02/09/VJudge--Task/"/>
      <url>/2020/02/09/VJudge--Task/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Task"><a href="#题目-Task" class="headerlink" title="题目 - Task"></a>题目 - Task</h2><p>Today the company has m tasks to complete. The ith task need xi minutes to complete. Meanwhile, this task has a difficulty level yi. The machine whose level below this task’s level yi cannot complete this task. If the company completes this task, they will get (500<em>xi+2</em>yi) dollars.<br>The company has n machines. Each machine has a maximum working time and a level. If the time for the task is more than the maximum working time of the machine, the machine can not complete this task. Each machine can only complete a task one day. Each task can only be completed by one machine.<br>The company hopes to maximize the number of the tasks which they can complete today. If there are multiple solutions, they hopes to make the money maximum.</p><p>Input</p><p>The input contains several test cases.<br>The first line contains two integers N and M. N is the number of the machines.M is the number of tasks(1 &lt; =N &lt;= 100000,1&lt;=M&lt;=100000).<br>The following N lines each contains two integers xi(0&lt;xi&lt;1440),yi(0=&lt;yi&lt;=100).xi is the maximum time the machine can work.yi is the level of the machine.<br>The following M lines each contains two integers xi(0&lt;xi&lt;1440),yi(0=&lt;yi&lt;=100).xi is the time we need to complete the task.yi is the level of the task.</p><p>Output</p><p>For each test case, output two integers, the maximum number of the tasks which the company can complete today and the money they will get.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">100 3</span><br><span class="line">100 2</span><br><span class="line">100 1</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 50004</span><br></pre></td></tr></table></figure><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>​    m个任务，每一个任务包括需要的时间和完成的难度，n台机器，每台任务有工作的最大时间和可以完成的任务的最大难度。完成一个任务可以获得奖金，最大时间&gt;=任务的时间，最大难度&gt;=任务的难度，这里要注意每个任务只能由一台机器完成，每台机器只能完成一个任务，要求：完成尽量多的任务，多种情况的时候，尽量使得奖金最多。</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    之前弄清题目意思，没有注意到每个任务只能由一台机器完成，每台机器只能完成一个任务。</p><p>​    弄清之后，可以这样考虑这道题，对于每个任务和机器不论是时间还是难度都从大到小排序，对于每个任务而言来找满足条件的机器，选择最大难度最小的那个，因为在找机器的过程是从大到小的所以在时间上是满足条件的，但难度就不一定所以，先用难度小的，保留难度大的。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;a[<span class="number">100005</span>], b[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.x != b.x) <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.y &gt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="comment">//这里要注意，多组测试样例</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//注意sum可能超出int型范围</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a[i].x, &amp;a[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;b[i].x, &amp;b[i].y);</span><br><span class="line">&#125;</span><br><span class="line">sort(a, a + n, cmp);</span><br><span class="line">    <span class="comment">//这里写成了加n所以wa了</span></span><br><span class="line">sort(b, b + m, cmp);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(j  &lt; n &amp;&amp; a[j].x &gt;= b[i].x) &#123;</span><br><span class="line">vis[a[j].y]++;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k  = b[i].y; k &lt;= <span class="number">100</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[k]) &#123;</span><br><span class="line">--vis[k];</span><br><span class="line">++ans;</span><br><span class="line">sum += <span class="number">500</span> * b[i].x + <span class="number">2</span> * b[i].y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">" "</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Entropy</title>
      <link href="/2020/02/08/VJudge--Entropy/"/>
      <url>/2020/02/08/VJudge--Entropy/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Entropy"><a href="#题目-Entropy" class="headerlink" title="题目 - Entropy"></a>题目 - Entropy</h2><p>An entropy encoder is a data encoding method that achieves lossless data compression by encoding a message with “wasted” or “extra” information removed. In other words, entropy encoding removes information that was not necessary in the first place to accurately encode the message. A high degree of entropy implies a message with a great deal of wasted information; english text encoded in ASCII is an example of a message type that has very high entropy. Already compressed messages, such as JPEG graphics or ZIP archives, have very little entropy and do not benefit from further attempts at entropy encoding.</p><p>English text encoded in ASCII has a high degree of entropy because all characters are encoded using the same number of bits, eight. It is a known fact that the letters E, L, N, R, S and T occur at a considerably higher frequency than do most other letters in english text. If a way could be found to encode just these letters with four bits, then the new encoding would be smaller, would contain all the original information, and would have less entropy. ASCII uses a fixed number of bits for a reason, however: it’s easy, since one is always dealing with a fixed number of bits to represent each possible glyph or character. How would an encoding scheme that used four bits for the above letters be able to distinguish between the four-bit codes and eight-bit codes? This seemingly difficult problem is solved using what is known as a “prefix-free variable-length” encoding.</p><p>In such an encoding, any number of bits can be used to represent any glyph, and glyphs not present in the message are simply not encoded. However, in order to be able to recover the information, no bit pattern that encodes a glyph is allowed to be the prefix of any other encoding bit pattern. This allows the encoded bitstream to be read bit by bit, and whenever a set of bits is encountered that represents a glyph, that glyph can be decoded. If the prefix-free constraint was not enforced, then such a decoding would be impossible.</p><p>Consider the text “AAAAABCD”. Using ASCII, encoding this would require 64 bits. If, instead, we encode “A” with the bit pattern “00”, “B” with “01”, “C” with “10”, and “D” with “11” then we can encode this text in only 16 bits; the resulting bit pattern would be “0000000000011011”. This is still a fixed-length encoding, however; we’re using two bits per glyph instead of eight. Since the glyph “A” occurs with greater frequency, could we do better by encoding it with fewer bits? In fact we can, but in order to maintain a prefix-free encoding, some of the other bit patterns will become longer than two bits. An optimal encoding is to encode “A” with “0”, “B” with “10”, “C” with “110”, and “D” with “111”. (This is clearly not the only optimal encoding, as it is obvious that the encodings for B, C and D could be interchanged freely for any given encoding without increasing the size of the final encoded message.) Using this encoding, the message encodes in only 13 bits to “0000010110111”, a compression ratio of 4.9 to 1 (that is, each bit in the final encoded message represents as much information as did 4.9 bits in the original encoding). Read through this bit pattern from left to right and you’ll see that the prefix-free encoding makes it simple to decode this into the original text even though the codes have varying bit lengths.</p><p>As a second example, consider the text “THE CAT IN THE HAT”. In this text, the letter “T” and the space character both occur with the highest frequency, so they will clearly have the shortest encoding bit patterns in an optimal encoding. The letters “C”, “I’ and “N” only occur once, however, so they will have the longest codes.</p><p>There are many possible sets of prefix-free variable-length bit patterns that would yield the optimal encoding, that is, that would allow the text to be encoded in the fewest number of bits. One such optimal encoding is to encode spaces with “00”, “A” with “100”, “C” with “1110”, “E” with “1111”, “H” with “110”, “I” with “1010”, “N” with “1011” and “T” with “01”. The optimal encoding therefore requires only 51 bits compared to the 144 that would be necessary to encode the message with 8-bit ASCII encoding, a compression ratio of 2.8 to 1.</p><p>Input</p><p>The input file will contain a list of text strings, one per line. The text strings will consist only of uppercase alphanumeric characters and underscores (which are used in place of spaces). The end of the input will be signalled by a line containing only the word “END” as the text string. This line should not be processed.</p><p>Output</p><p>For each text string in the input, output the length in bits of the 8-bit ASCII encoding, the length in bits of an optimal prefix-free variable-length encoding, and the compression ratio accurate to one decimal point.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AAAAABCD</span><br><span class="line">THE_CAT_IN_THE_HAT</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">64 13 4.9</span><br><span class="line">144 51 2.8</span><br></pre></td></tr></table></figure><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>​    输入字符串，分别用ACSII编码和Huffman编码，计算权值和比率</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    我那本算法书上给的用的STL的优先队列，我感觉还挺巧妙的。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="comment">//这里需要一个空格（我的编译器不支持）</span></span><br><span class="line">priority_queue&lt; <span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>, s) &amp;&amp; s != <span class="string">"END"</span>) &#123;</span><br><span class="line">sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">int</span> len = s.length();</span><br><span class="line"><span class="keyword">int</span>  t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == s[i<span class="number">-1</span>]) ++t;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] != s[i<span class="number">-1</span>]) &#123;</span><br><span class="line">Q.push(t);</span><br><span class="line">t = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Q.push(t);</span><br><span class="line"><span class="keyword">int</span> ans1 = len * <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(Q.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">ans2 = Q.top();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> a = Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">if</span>(Q.empty()) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> b = Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line">ans2 += (a + b);</span><br><span class="line">Q.push(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans1&lt;&lt;<span class="string">" "</span>&lt;&lt;ans2&lt;&lt;<span class="string">" "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">1</span>)&lt;&lt;ans1 * <span class="number">1.0</span> / ans2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Just a Hook</title>
      <link href="/2020/02/08/VJudge--Just%20a%20Hook/"/>
      <url>/2020/02/08/VJudge--Just%20a%20Hook/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Just-a-Hook"><a href="#题目-Just-a-Hook" class="headerlink" title="题目 - Just a Hook"></a>题目 - Just a Hook</h2><p>In the game of DotA, Pudge’s meat hook is actually the most horrible thing for most of the heroes. The hook is made up of several consecutive metallic sticks which are of the same length.</p><p><img src="https://vj.z180.cn/779a6c86f4db19106cba2c46a7dafe46?v=1581043983" alt="img"></p><p>Now Pudge wants to do some operations on the hook.</p><p>Let us number the consecutive metallic sticks of the hook from 1 to N. For each operation, Pudge can change the consecutive metallic sticks, numbered from X to Y, into cupreous sticks, silver sticks or golden sticks.<br>The total value of the hook is calculated as the sum of values of N metallic sticks. More precisely, the value for each kind of stick is calculated as follows:</p><p>For each cupreous stick, the value is 1.<br>For each silver stick, the value is 2.<br>For each golden stick, the value is 3.</p><p>Pudge wants to know the total value of the hook after performing the operations.<br>You may consider the original hook is made up of cupreous sticks.</p><p>Input</p><p>The input consists of several test cases. The first line of the input is the number of the cases. There are no more than 10 cases.<br>For each case, the first line contains an integer N, 1&lt;=N&lt;=100,000, which is the number of the sticks of Pudge’s meat hook and the second line contains an integer Q, 0&lt;=Q&lt;=100,000, which is the number of the operations.<br>Next Q lines, each line contains three integers X, Y, 1&lt;=X&lt;=Y&lt;=N, Z, 1&lt;=Z&lt;=3, which defines an operation: change the sticks numbered from X to Y into the metal kind Z, where Z=1 represents the cupreous kind, Z=2 represents the silver kind and Z=3 represents the golden kind.</p><p>Output</p><p>For each case, print a number in a line representing the total value of the hook after the operations. Use the format in the example.</p><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">9</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Case <span class="number">1</span>: The total value of the hook is <span class="number">24.</span></span><br></pre></td></tr></table></figure><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>​    一个流星锤材质为铜(1)、银(2)、金(3)，默认为铜，求总重量.</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    线段树板子题，需要做些修改。在分析题目时可以发现树的每个结点存储的值就为换成的材质的重量，不需要考虑增加或者减少多少。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[MAXN &lt;&lt; <span class="number">2</span>], add[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(add[u]) &#123;</span><br><span class="line">add[u &lt;&lt; <span class="number">1</span>] = add[u];</span><br><span class="line">add[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = add[u];</span><br><span class="line">sum[u &lt;&lt; <span class="number">1</span>] = (m - (m &gt;&gt; <span class="number">1</span>)) * add[u];</span><br><span class="line">sum[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = (m &gt;&gt; <span class="number">1</span>) * add[u];</span><br><span class="line">add[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">sum[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">BuildTree(l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line">BuildTree(mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">sum[u] = sum[u &lt;&lt; <span class="number">1</span>] + sum[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= l &amp;&amp; b &gt;= r) &#123;</span><br><span class="line">sum[u] = (<span class="keyword">long</span> <span class="keyword">long</span>)(r - l + <span class="number">1</span>) * c;</span><br><span class="line">add[u] = c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(u, r - l + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= mid) Update(a, b, c, l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(b &gt; mid) Update(a, b, c, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">sum[u] = sum[u &lt;&lt; <span class="number">1</span>] + sum[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class="keyword">return</span> sum[u];</span><br><span class="line">push_down(u, r - l + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= mid) ans += Query(a, b, l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(b &gt; mid) ans += Query(a, b, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="comment">//这里失误写错了，然后就WA了</span></span><br><span class="line"><span class="built_in">memset</span>(add,<span class="number">0</span>,<span class="keyword">sizeof</span>(add));</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">BuildTree(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">Update(a, b, c, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = Query(<span class="number">1</span>, n, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: The total value of the hook is %d.\n"</span>,i,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Strange fuction</title>
      <link href="/2020/02/08/VJudge--Strange%20fuction/"/>
      <url>/2020/02/08/VJudge--Strange%20fuction/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Strange-fuction"><a href="#题目-Strange-fuction" class="headerlink" title="题目 - Strange fuction"></a>题目 - Strange fuction</h2><p>Now, here is a fuction:<br> F(x) = 6 * x^7+8<em>x^6+7</em>x^3+5<em>x^2-y</em>x (0 &lt;= x &lt;=100)<br>Can you find the minimum value when x is between 0 and 100.</p><p>Input</p><p>The first line of the input contains an integer T(1&lt;=T&lt;=100) which means the number of test cases. Then T lines follow, each line has only one real numbers Y.(0 &lt; Y &lt;1e10)</p><p>Output</p><p>Just the minimum value (accurate up to 4 decimal places),when x is between 0 and 100.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">100</span><br><span class="line">200</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-74.4291</span><br><span class="line">-178.8534</span><br></pre></td></tr></table></figure><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>​    输入y的值，大致估算该函数的最小值</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">6</span>*<span class="built_in">pow</span>(x,<span class="number">7</span>) + <span class="number">8</span>*<span class="built_in">pow</span>(x,<span class="number">6</span>) + <span class="number">7</span>*<span class="built_in">pow</span>(x,<span class="number">3</span>) + <span class="number">5</span>*<span class="built_in">pow</span>(x,<span class="number">2</span>) - y*x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">anneal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> T=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">double</span> delta=<span class="number">0.98</span>; </span><br><span class="line"><span class="keyword">double</span> x=<span class="number">50.0</span>;</span><br><span class="line"><span class="keyword">double</span> now=f(x);</span><br><span class="line"><span class="keyword">double</span> ans=now;</span><br><span class="line"><span class="keyword">while</span>(T&gt;eps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> nowx=x+dir[rand()%<span class="number">2</span>]*T;</span><br><span class="line"><span class="keyword">if</span>(nowx&gt;=<span class="number">0.0</span> &amp;&amp; nowx&lt;=<span class="number">100.0</span>)</span><br><span class="line">&#123;</span><br><span class="line">now=f(nowx);</span><br><span class="line"><span class="keyword">if</span>(ans-now&gt;eps)</span><br><span class="line">&#123;</span><br><span class="line">ans=now;</span><br><span class="line">x=nowx;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">T*=delta;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,anneal());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--迷瘴</title>
      <link href="/2020/02/08/VJudge--%E8%BF%B7%E7%98%B4/"/>
      <url>/2020/02/08/VJudge--%E8%BF%B7%E7%98%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-迷瘴"><a href="#题目-迷瘴" class="headerlink" title="题目 - 迷瘴"></a>题目 - 迷瘴</h2><p>通过悬崖的yifenfei，又面临着幽谷的考验——<br>幽谷周围瘴气弥漫，静的可怕，隐约可见地上堆满了骷髅。由于此处长年不见天日，导致空气中布满了毒素，一旦吸入体内，便会全身溃烂而死。<br>幸好yifenfei早有防备，提前备好了解药材料（各种浓度的万能药水）。现在只需按照配置成不同比例的浓度。<br>现已知yifenfei随身携带有n种浓度的万能药水，体积V都相同，浓度则分别为Pi%。并且知道，针对当时幽谷的瘴气情况，只需选择部分或者全部的万能药水，然后配置出浓度不大于 W%的药水即可解毒。<br>现在的问题是：如何配置此药，能得到最大体积的当前可用的解药呢？<br>特别说明：由于幽谷内设备的限制,只允许把一种已有的药全部混入另一种之中（即：不能出现对一种药只取它的一部分这样的操作）。<br><img src="https://vj.z180.cn/ef5951573422cfed831a4411de14f1ae?v=1581171483" alt="img"></p><p>Input</p><p>输入数据的第一行是一个整数C，表示测试数据的组数；<br>每组测试数据包含2行，首先一行给出三个正整数n,V,W(1&lt;=n,V,W&lt;=100)；<br>接着一行是n个整数，表示n种药水的浓度Pi%(1&lt;=Pi&lt;=100)。</p><p>Output</p><p>对于每组测试数据，请输出一个整数和一个浮点数；<br>其中整数表示解药的最大体积，浮点数表示解药的浓度(四舍五入保留2位小数)；<br>如果不能配出满足要求的的解药，则请输出0 0.00。</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 100 10</span><br><span class="line">100</span><br><span class="line">2 100 24</span><br><span class="line">20 30</span><br><span class="line">3 100 24</span><br><span class="line">20 20 30</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0.00</span><br><span class="line">100 0.20</span><br><span class="line">300 0.23</span><br></pre></td></tr></table></figure><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    因为体积相同，所以浓度由低到高排序，然后循环取浓度小的药水，直到浓度大于W即可。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, v, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n,&amp;v,&amp;w);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]); </span><br><span class="line">sort(a, a + n);</span><br><span class="line"><span class="keyword">int</span>  sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> w1 = w / <span class="number">100.0</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">sum +=a[k];</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">double</span>)sum / ((<span class="keyword">double</span>) (k+<span class="number">1</span>) * <span class="number">100</span>) &gt; w1) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((<span class="keyword">double</span>)sum / ((<span class="keyword">double</span>) (k+<span class="number">1</span>) * <span class="number">100</span>) &lt;= w1) &#123;</span><br><span class="line">p = (<span class="keyword">double</span>)sum / ((<span class="keyword">double</span>) (k+<span class="number">1</span>) * <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"0 0.00"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;k*v&lt;&lt;<span class="string">" "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--和为给定数</title>
      <link href="/2020/02/06/NOI--%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E6%95%B0/"/>
      <url>/2020/02/06/NOI--%E5%92%8C%E4%B8%BA%E7%BB%99%E5%AE%9A%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="07-和为给定数"><a href="#07-和为给定数" class="headerlink" title="07:和为给定数"></a>07:和为给定数</h2><p>描述</p><p>给出若干个整数，询问其中是否有一对数的和等于给定的数。</p><p>输入</p><p>共三行：<br>第一行是整数n(0 &lt; n &lt;= 100,000)，表示有n个整数。<br>第二行是n个整数。整数的范围是在0到10^8之间。<br>第三行是一个整数m（0 &lt;= m &lt;= 2^30)，表示需要得到的和。</p><p>输出</p><p>若存在和为m的数对，输出两个整数，小的在前，大的在后，中间用单个空格隔开。若有多个数对满足条件，选择数对中较小的数更小的。若找不到符合要求的数对，输出一行No。</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2 5 1 4</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 5</span><br></pre></td></tr></table></figure><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>WA了一次，发现如果测试数据为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3 4</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>输出 1 1，实际上输出为“No”，说明不能重复找，所以把每次的查找起始位置换为该元素的下一个元素。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = y;</span><br><span class="line"><span class="keyword">int</span> r = n;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; a[mid]) l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x &lt; a[mid])r = mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x == a[mid]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">sort(a, a + n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> p = a[i];</span><br><span class="line"><span class="keyword">int</span> q = m - a[i];</span><br><span class="line">        <span class="comment">//这里，每次查找从该元素的下一个元素开始找就不会重复啦</span></span><br><span class="line"><span class="keyword">if</span>(check(q, i + <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p&lt;&lt;<span class="string">" "</span>&lt;&lt;q&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--矩阵分割</title>
      <link href="/2020/02/06/NOI--%E7%9F%A9%E9%98%B5%E5%88%86%E5%89%B2/"/>
      <url>/2020/02/06/NOI--%E7%9F%A9%E9%98%B5%E5%88%86%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="03-矩形分割"><a href="#03-矩形分割" class="headerlink" title="03:矩形分割"></a>03:矩形分割</h2><p>描述</p><p>平面上有一个大矩形，其左下角坐标（0，0），右上角坐标（R,R)。大矩形内部包含一些小矩形，小矩形都平行于坐标轴且互不重叠。所有矩形的顶点都是整点。要求画一根平行于y轴的直线x=k（k是整数) ，使得这些小矩形落在直线左边的面积必须大于等于落在右边的面积，且两边面积之差最小。并且，要使得大矩形在直线左边的的面积尽可能大。注意：若直线穿过一个小矩形，将会把它切成两个部分，分属左右两侧。</p><p>输入</p><p>第一行是整数R，表示大矩形的右上角坐标是(R,R) (1 &lt;= R &lt;= 1,000,000)。<br>接下来的一行是整数N,表示一共有N个小矩形(0 &lt; N &lt;= 10000)。<br>再接下来有N 行。每行有4个整数，L,T, W 和 H, 表示有一个小矩形的左上角坐标是(L,T),宽度是W，高度是H (0&lt;=L,T &lt;= R, 0 &lt; W,H &lt;= R). 小矩形不会有位于大矩形之外的部分。</p><p>输出</p><p>输出整数n，表示答案应该是直线 x=n。 如果必要的话，x=R也可以是答案。</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1000</span><br><span class="line">2</span><br><span class="line">1 1 2 1</span><br><span class="line">5 1 2 1</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>以下面为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2</span><br><span class="line">1 1 1 1</span><br><span class="line">3 1 2 1</span><br></pre></td></tr></table></figure><p>并记a[i]表示直线x=i-1与x=i之前的矩形面积，得a[1..6]={0，1，0，1，1，0}，<strong>前缀和</strong>s[1..6]={0，1，1，2，2，2}，那么问题可以这样处理：先二分找到满足左边矩形面积不小于右边矩形面积的第一个元素位置，这里是2——<strong>二分查找求下界</strong>，因为s[2]=s[3]，所以需要取3。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> R, n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">1000001</span>], s[<span class="number">1000001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span> * s[mid] &gt;= s[R]) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid + <span class="number">1</span>; </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> l; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> L,T,W,H;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;R&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;L&gt;&gt;T&gt;&gt;W&gt;&gt;H;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= W; j++) &#123;</span><br><span class="line">a[L + j] += H;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">s[i] = s[i<span class="number">-1</span>] + a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t = Find(<span class="number">1</span>, R);</span><br><span class="line"><span class="keyword">while</span>(s[t] == s[t + <span class="number">1</span>] &amp;&amp; t &lt; R) t++;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--网线主管</title>
      <link href="/2020/02/06/NOI--%E7%BD%91%E7%BA%BF%E4%B8%BB%E7%AE%A1/"/>
      <url>/2020/02/06/NOI--%E7%BD%91%E7%BA%BF%E4%B8%BB%E7%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="04-网线主管"><a href="#04-网线主管" class="headerlink" title="04:网线主管"></a>04:网线主管</h2><p>描述</p><p>仙境的居民们决定举办一场程序设计区域赛。裁判委员会完全由自愿组成，他们承诺要组织一次史上最公正的比赛。他们决定将选手的电脑用星形拓扑结构连接在一起，即将它们全部连到一个单一的中心服务器。为了组织这个完全公正的比赛，裁判委员会主席提出要将所有选手的电脑等距离地围绕在服务器周围放置。</p><p>为购买网线，裁判委员会联系了当地的一个网络解决方案提供商，要求能够提供一定数量的等长网线。裁判委员会希望网线越长越好，这样选手们之间的距离可以尽可能远一些。</p><p>该公司的网线主管承接了这个任务。他知道库存中每条网线的长度（精确到厘米），并且只要告诉他所需的网线长度（精确到厘米），他都能够完成对网线的切割工作。但是，这次，所需的网线长度并不知道，这让网线主管不知所措。</p><p>你需要编写一个程序，帮助网线主管确定一个最长的网线长度，并且按此长度对库存中的网线进行切割，能够得到指定数量的网线。</p><p>输入</p><p>第一行包含两个整数N和K，以单个空格隔开。N（1 &lt;= N &lt;= 10000）是库存中的网线数，K（1 &lt;= K &lt;= 10000）是需要的网线数量。<br>接下来N行，每行一个数，为库存中每条网线的长度（单位：米）。所有网线的长度至少1m，至多100km。输入中的所有长度都精确到厘米，即保留到小数点后两位。</p><p>输出</p><p>网线主管能够从库存的网线中切出指定数量的网线的最长长度（单位：米）。必须精确到厘米，即保留到小数点后两位。<br>若无法得到长度至少为1cm的指定数量的网线，则必须输出“0.00”（不包含引号）。</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 11</span><br><span class="line">8.02</span><br><span class="line">7.43</span><br><span class="line">4.57</span><br><span class="line">5.39</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.00</span><br></pre></td></tr></table></figure><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>​    如果暴力枚举从[0,max]中的所有可能值，复杂度为O(max * n)不行，所以采用二分把复杂度降到o(n * log n)，写这个题注意下细节，小于1cm时不能算上。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">sum += a[i] / x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum &gt;= k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">double</span> t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">a[i] = t * <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="built_in">max</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//这里用r-l&gt;1</span></span><br><span class="line"><span class="keyword">while</span>(r - l &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//因为这个分母为100，Wa掉了</span></span><br><span class="line"><span class="keyword">double</span> ans = l / <span class="number">100.0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--A Simple Problem with Integers</title>
      <link href="/2020/02/04/VJudge--A%20Simple%20Problem%20with%20Integers/"/>
      <url>/2020/02/04/VJudge--A%20Simple%20Problem%20with%20Integers/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-A-Simple-Problem-with-Integers"><a href="#题目-A-Simple-Problem-with-Integers" class="headerlink" title="题目 -  A Simple Problem with Integers"></a>题目 -  A Simple Problem with Integers</h2><p>You have <em>N</em> integers, <em>A</em>1, <em>A</em>2, … , <em>AN</em>. You need to deal with two kinds of operations. One type of operation is to add some given number to each number in a given interval. The other is to ask for the sum of numbers in a given interval.</p><p>Input</p><p>The first line contains two numbers <em>N</em> and <em>Q</em>. 1 ≤ <em>N</em>,<em>Q</em> ≤ 100000.<br>The second line contains <em>N</em> numbers, the initial values of <em>A</em>1, <em>A</em>2, … , <em>AN</em>. -1000000000 ≤ <em>Ai</em> ≤ 1000000000.<br>Each of the next <em>Q</em> lines represents an operation.<br>“C <em>a</em> <em>b</em> <em>c</em>“ means adding <em>c</em> to each of <em>Aa</em>, <em>Aa</em>+1, … , <em>Ab</em>. -10000 ≤ <em>c</em> ≤ 10000.<br>“Q <em>a</em> <em>b</em>“ means querying the sum of <em>Aa</em>, <em>Aa</em>+1, … , <em>Ab</em>.</p><p>Output</p><p>You need to answer all <em>Q</em> commands in order. One answer in a line.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10 5</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">Q 4 4</span><br><span class="line">Q 1 10</span><br><span class="line">Q 2 4</span><br><span class="line">C 3 6 3</span><br><span class="line">Q 2 4</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">55</span><br><span class="line">9</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p>Hint</p><p>The sums may exceed the range of 32-bit integers.</p><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>​    给出N个数，进行Q个操作，1&lt;=N，Q&lt;=100000。有两种操作：</p><p>​    “C a b c”,对区间[a,b]的每个数字加c</p><p>​    ”Q a b c”,查询区间[a,b]的数字和</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><h6 id="区间修改模板，TLE了一次。"><a href="#区间修改模板，TLE了一次。" class="headerlink" title="区间修改模板，TLE了一次。"></a>区间修改模板，TLE了一次。</h6><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[MAXN &lt;&lt; <span class="number">2</span>], add[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(add[u]) &#123;</span><br><span class="line">add[u &lt;&lt; <span class="number">1</span>] += add[u];</span><br><span class="line">add[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[u];</span><br><span class="line">sum[u &lt;&lt; <span class="number">1</span>] += (m - (m &gt;&gt; <span class="number">1</span>)) * add[u];</span><br><span class="line">sum[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += (m &gt;&gt; <span class="number">1</span>) * add[u];</span><br><span class="line">add[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;sum[u];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">BuildTree(l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line">BuildTree(mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">sum[u] = sum[u &lt;&lt; <span class="number">1</span>] + sum[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= l &amp;&amp; b &gt;= r) &#123;</span><br><span class="line">sum[u] += (r - l + <span class="number">1</span>) * c;</span><br><span class="line">add[u] += c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(u, r - l + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= mid) Update(a, b, c, l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(b &gt; mid) Update(a, b, c, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">sum[u] = sum[u &lt;&lt; <span class="number">1</span>] + sum[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class="keyword">return</span> sum[u];</span><br><span class="line">push_down(u, r - l + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= mid) ans += Query(a, b, l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(b &gt; mid) ans += Query(a, b, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="comment">//之前没有加这句话所以TLE了</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="built_in">memset</span>(add, <span class="number">0</span>, <span class="keyword">sizeof</span>(add));</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">BuildTree(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Query(a,b,<span class="number">1</span>,n,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">Update(a,b,c,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Lost Cows</title>
      <link href="/2020/02/04/VJudge--Lost%20Cows/"/>
      <url>/2020/02/04/VJudge--Lost%20Cows/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vjudge.net/problem/POJ-2182" target="_blank" rel="noopener">E - Lost Cows</a></p><p>N (2 &lt;= N &lt;= 8,000) cows have unique brands in the range 1..N. In a spectacular display of poor judgment, they visited the neighborhood ‘watering hole’ and drank a few too many beers before dinner. When it was time to line up for their evening meal, they did not line up in the required ascending numerical order of their brands.</p><p>Regrettably, FJ does not have a way to sort them. Furthermore, he’s not very good at observing problems. Instead of writing down each cow’s brand, he determined a rather silly statistic: For each cow in line, he knows the number of cows that precede that cow in line that do, in fact, have smaller brands than that cow.</p><p>Given this data, tell FJ the exact ordering of the cows.</p><p>Input</p><p>* Line 1: A single integer, N</p><p>* Lines 2..N: These N-1 lines describe the number of cows that precede a given cow in line and have brands smaller than that cow. Of course, no cows precede the first cow in line, so she is not listed. Line 2 of the input describes the number of preceding cows whose brands are smaller than the cow in slot #2; line 3 describes the number of preceding cows whose brands are smaller than the cow in slot #3; and so on.</p><p>Output</p><p>* Lines 1..N: Each of the N lines of output tells the brand of a cow in line. Line #1 of the output tells the brand of the first cow in line; line 2 tells the brand of the second cow; and so on.</p><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>有编号是1~n的n个数字，2&lt;=n&lt;=8000,乱序排列，顺序是未知的。对于每个位置的数字，知道排在它前面比它小的数字有多少个。求这个乱序数列的顺序。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">8005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> r,l,len;</span><br><span class="line">&#125;tree[<span class="number">4</span> * MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[MAX],ans[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">tree[u].l = l;</span><br><span class="line">tree[u].r = r;</span><br><span class="line">tree[u].len = r - l + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">BuildTree(l, (l+r)&gt;&gt;<span class="number">1</span>, u&lt;&lt;<span class="number">1</span>);</span><br><span class="line">BuildTree(((l+r)&gt;&gt;<span class="number">1</span>) + <span class="number">1</span>, r, (u&lt;&lt;<span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">tree[u].len --;</span><br><span class="line"><span class="keyword">if</span>(tree[u].l == tree[u].r) <span class="keyword">return</span> tree[u].l;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[u&lt;&lt;<span class="number">1</span>].len &lt; num) <span class="keyword">return</span> Query((u &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, num - tree[u&lt;&lt;<span class="number">1</span>].len);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[u&lt;&lt;<span class="number">1</span>].len &gt;= num) <span class="keyword">return</span> Query(u &lt;&lt; <span class="number">1</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">pre[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;pre[i];</span><br><span class="line">&#125;</span><br><span class="line">BuildTree(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i --)&#123;</span><br><span class="line">ans[i] = Query(<span class="number">1</span>, pre[i] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--敌兵布阵</title>
      <link href="/2020/02/04/VJudge--%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5/"/>
      <url>/2020/02/04/VJudge--%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-敌兵布阵"><a href="#题目-敌兵布阵" class="headerlink" title="题目 -  敌兵布阵"></a>题目 -  敌兵布阵</h2><p>C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br>中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:”你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：”我知错了。。。”但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的.</p><p>Input</p><p>第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br>(4)End 表示结束，这条命令在每组数据最后出现;<br>每组数据最多有40000条命令</p><p>Output</p><p>对第i组数据,首先输出“Case i:”和回车,<br>对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">Query 1 3</span><br><span class="line">Add 3 6</span><br><span class="line">Query 2 7</span><br><span class="line">Sub 10 2</span><br><span class="line">Add 6 3</span><br><span class="line">Query 3 10</span><br><span class="line">End</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">6</span><br><span class="line">33</span><br><span class="line">59</span><br></pre></td></tr></table></figure><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>​    一道线段树入门题，单点修改，WA了十六次，心态没了，人也没了。</p><p>​    十六WA心得体会:</p><p>​    1.输入输出尽量用C语言的，别用cin/cout</p><p>​    2.能简化代码就尽量简化别整这些有的没的</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[MAX &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sum[u]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">BuildTree(l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line">BuildTree(mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">sum[u] = sum[u &lt;&lt; <span class="number">1</span>] + sum[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//之前写了两个函数Add和Sub,就是因为这个我WA了这么多次,原理一样，所以简化成一个</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r == a &amp;&amp; l == a) &#123;</span><br><span class="line">sum[u] += b;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= mid) Update(a, b, l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> Update(a, b, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">sum[u] = sum[u &lt;&lt; <span class="number">1</span>] + sum[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class="keyword">return</span> sum[u];</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= mid) ans += Query(a, b, l, mid, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(b &gt; mid) ans += Query(a, b, mid + <span class="number">1</span>, r, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//输入和输出用C语言的</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,++l);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">BuildTree(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> a, b; </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'A'</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">Update(a, b, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'S'</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">Update(a, -b, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query(a, b, <span class="number">1</span>, n, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--矩阵剪刀石头布</title>
      <link href="/2020/02/03/NOI--%E7%9F%A9%E9%98%B5%E5%89%AA%E5%88%80%E7%9F%B3%E5%A4%B4%E5%B8%83/"/>
      <url>/2020/02/03/NOI--%E7%9F%A9%E9%98%B5%E5%89%AA%E5%88%80%E7%9F%B3%E5%A4%B4%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h2 id="16-矩阵剪刀石头布"><a href="#16-矩阵剪刀石头布" class="headerlink" title="16:矩阵剪刀石头布"></a>16:矩阵剪刀石头布</h2><p>描述</p><p>Bart的妹妹Lisa在一个二维矩阵上创造了新的文明。矩阵上每个位置被三种生命形式之一占据：石头，剪刀，布。每天，上下左右相邻的不同生命形式将会发生战斗。在战斗中，石头永远胜剪刀，剪刀永远胜布，布永远胜石头。每一天结束之后，败者的领地将被胜者占领。</p><p>你的工作是计算出n天之后矩阵的占据情况。</p><p>输入</p><p>第一行包含三个正整数r，c，n，分别表示矩阵的行数、列数以及天数。每个整数均不超过100。<br>接下来r行，每行c个字符，描述矩阵初始时被占据的情况。每个位置上的字符只能是R，S，P三者之一，分别代表石头，剪刀，布。相邻字符之间无空格。</p><p>输出</p><p>输出n天之后的矩阵占据情况。每个位置上的字符只能是R，S，P三者之一，相邻字符之间无空格。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">RRR</span><br><span class="line">RSR</span><br><span class="line">RRR</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RRR</span><br><span class="line">RRR</span><br><span class="line">RRR</span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">101</span>][<span class="number">101</span>],b[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r,c,n,i,j;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=n;d++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//写之前没有缕清题意，没有加b数组存储每天修改之前的矩阵，这样的话每次修改相互影响</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line">b[i][j]=a[i][j];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]==<span class="string">'R'</span>&amp;&amp;(b[i][j<span class="number">-1</span>]==<span class="string">'P'</span>||b[i<span class="number">-1</span>][j]==<span class="string">'P'</span>||b[i][j+<span class="number">1</span>]==<span class="string">'P'</span>||b[i+<span class="number">1</span>][j]==<span class="string">'P'</span>))</span><br><span class="line">a[i][j]=<span class="string">'P'</span>;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]==<span class="string">'S'</span>&amp;&amp;(b[i][j<span class="number">-1</span>]==<span class="string">'R'</span>||b[i<span class="number">-1</span>][j]==<span class="string">'R'</span>||b[i][j+<span class="number">1</span>]==<span class="string">'R'</span>||b[i+<span class="number">1</span>][j]==<span class="string">'R'</span>))</span><br><span class="line">a[i][j]=<span class="string">'R'</span>;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]==<span class="string">'P'</span>&amp;&amp;(b[i][j<span class="number">-1</span>]==<span class="string">'S'</span>||b[i<span class="number">-1</span>][j]==<span class="string">'S'</span>||b[i][j+<span class="number">1</span>]==<span class="string">'S'</span>||b[i+<span class="number">1</span>][j]==<span class="string">'S'</span>))</span><br><span class="line">a[i][j]=<span class="string">'S'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i][j];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM|时间复杂度</title>
      <link href="/2020/02/03/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>/2020/02/03/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="如图："><a href="#如图：" class="headerlink" title="如图："></a>如图：</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20181202183523604.png" alt="img"></h3><h6 id="对应：O-1-lt-O-log2n-lt-O-n-lt-O-nlog2n-lt-O-n-2-lt-O-n-3-lt-O-2-n-lt-O-n"><a href="#对应：O-1-lt-O-log2n-lt-O-n-lt-O-nlog2n-lt-O-n-2-lt-O-n-3-lt-O-2-n-lt-O-n" class="headerlink" title="对应：O(1)&lt;O(log2n)&lt;O(n)&lt;O(nlog2n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)"></a>对应：O(1)&lt;O(log2n)&lt;O(n)&lt;O(nlog2n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在竞赛中，一般计算机一秒能运行5 x 10^8次计算，如果题目给出的限制时间在1s,那么你选择的算法执行的计算次数最多应该在10^8量级オ有可能解决这个题目，实际中还要考虑每种算法的常数。</span><br><span class="line"></span><br><span class="line">#####   O(n)的算法能解决的数据范围在n &lt; 10^8。</span><br><span class="line"></span><br><span class="line">#####   O(n *logn)的算法能解决的数据范围在n &lt;&#x3D; 10^6。</span><br><span class="line"></span><br><span class="line">#####   O(n*sqrt(n) )的算法能解决的数据范围在n &lt; 10^5。</span><br><span class="line"></span><br><span class="line">#####   O(n^2)的算法能解决的数据范围在n&lt;5000。</span><br><span class="line"></span><br><span class="line">#####   O(n^3)的算法能解决的数据范围在n &lt;300。</span><br><span class="line"></span><br><span class="line">#####   O(2^n)的算法能解决的数据范围在n &lt; 25。</span><br><span class="line"></span><br><span class="line">#####   O(n!)的算法能解决的数据范围在n &lt; 11。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--单词替换</title>
      <link href="/2020/02/02/NOI--%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2/"/>
      <url>/2020/02/02/NOI--%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="21-单词替换"><a href="#21-单词替换" class="headerlink" title="21:单词替换"></a>21:单词替换</h2><p>描述</p><p>输入一个字符串，以回车结束（字符串长度&lt;=100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。</p><p>输入</p><p>输入包括3行，<br>第1行是包含多个单词的字符串 s;<br>第2行是待替换的单词a(长度 &lt;= 100);<br>第3行是a将被替换的单词b(长度 &lt;= 100).</p><p>s, a, b 最前面和最后面都没有空格.</p><p>输出</p><p>输出只有 1 行，将s中所有单词a替换成b之后的字符串。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You want someone to help you</span><br><span class="line">You</span><br><span class="line">I</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You want someone to help you</span><br><span class="line">You</span><br><span class="line">I</span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">100</span>],a,b;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//感觉这个地方挺巧妙的</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s[n];</span><br><span class="line">++n;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;<span class="keyword">while</span>(c == <span class="string">' '</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == a) s[i] = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--大整数减法</title>
      <link href="/2020/02/02/NOI--%E5%A4%A7%E6%95%B4%E6%95%B0%E5%87%8F%E6%B3%95/"/>
      <url>/2020/02/02/NOI--%E5%A4%A7%E6%95%B4%E6%95%B0%E5%87%8F%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="11-大整数减法"><a href="#11-大整数减法" class="headerlink" title="11:大整数减法"></a>11:大整数减法</h2><p>描述</p><p>求两个大的正整数相减的差。</p><p>输入</p><p>共2行，第1行是被减数a，第2行是减数b(a &gt; b)。每个大整数不超过200位，不会有多余的前导零。</p><p>输出</p><p>一行，即所求的差。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9999999999999999999999999999999999999</span></span><br><span class="line"><span class="number">9999999999999</span></span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9999999999999999999999990000000000000</span></span><br></pre></td></tr></table></figure><h4 id="会写大整数加法这个题也没问题啦"><a href="#会写大整数加法这个题也没问题啦" class="headerlink" title="//会写大整数加法这个题也没问题啦"></a>//会写大整数加法这个题也没问题啦</h4><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">int</span> len1 = s1.length();</span><br><span class="line"><span class="keyword">int</span> len2 = s2.length();</span><br><span class="line"><span class="keyword">while</span>(len2&lt;len1)&#123;</span><br><span class="line">s2 = <span class="string">"0"</span> + s2;</span><br><span class="line">++len2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line">a[i] = s1[len1<span class="number">-1</span>-i] - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line">b[i] = s2[len2<span class="number">-1</span>-i] - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(len&lt;len1)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[len]&lt;b[len])&#123;</span><br><span class="line">a[len+<span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">c[len] = <span class="number">10</span> + a[len] - b[len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[len]&gt;=b[len]) c[len] = a[len] - b[len];</span><br><span class="line">++len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!c[len<span class="number">-1</span>]&amp;&amp;len&gt;<span class="number">1</span>)&#123;</span><br><span class="line">--len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--大整数加法</title>
      <link href="/2020/02/02/NOI--%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8A%A0%E6%B3%95/"/>
      <url>/2020/02/02/NOI--%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8A%A0%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="10-大整数加法"><a href="#10-大整数加法" class="headerlink" title="10:大整数加法"></a>10:大整数加法</h2><p>描述</p><p>求两个不超过200位的非负整数的和。</p><p>输入</p><p>有两行，每行是一个不超过200位的非负整数，可能有多余的前导0。</p><p>输出</p><p>一行，即相加后的结果。结果里不能有多余的前导0，即如果结果是342，那么就不能输出为0342。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22222222222222222222</span></span><br><span class="line"><span class="number">33333333333333333333</span></span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">55555555555555555555</span></span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">int</span> len1 = s1.length();</span><br><span class="line"><span class="keyword">int</span> len2 = s2.length();</span><br><span class="line"><span class="keyword">while</span>(len1&lt;len2)&#123;</span><br><span class="line">        <span class="comment">//写的时候感觉这一步很巧妙，因为貌似有道题我用了很麻烦的方法加上前导0</span></span><br><span class="line">s1 = <span class="string">"0"</span> + s1;</span><br><span class="line">++len1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(len1&gt;len2)&#123;</span><br><span class="line">s2 = <span class="string">"0"</span> + s2;</span><br><span class="line">++len2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line">a[i] = s1[len1<span class="number">-1</span>-i]-<span class="string">'0'</span>;</span><br><span class="line">b[i] = s2[len1<span class="number">-1</span>-i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//之所以是len&lt;=len1两数相加的时候把它的结果最高位不管进不进位都多当作进位（后续有消除前导0操作</span></span><br><span class="line"><span class="keyword">while</span>(len&lt;=len1)&#123;</span><br><span class="line">c[len] = a[len] + b[len] + x;</span><br><span class="line">x = c[len] / <span class="number">10</span>;</span><br><span class="line">c[len] %= <span class="number">10</span>;</span><br><span class="line">++len;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//这一步是消除前导0，之前WA了是因为0+0时把0给消除了所以我增加了len&gt;1</span></span><br><span class="line"><span class="keyword">while</span>(!c[len<span class="number">-1</span>]&amp;&amp;len&gt;<span class="number">1</span>) --len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--大整数的因子</title>
      <link href="/2020/02/02/NOI--%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9A%84%E5%9B%A0%E5%AD%90/"/>
      <url>/2020/02/02/NOI--%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9A%84%E5%9B%A0%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="13-大整数的因子"><a href="#13-大整数的因子" class="headerlink" title="13:大整数的因子"></a>13:大整数的因子</h2><p>描述</p><p>已知正整数k满足2&lt;=k&lt;=9，现给出长度最大为30位的十进制非负整数c，求所有能整除c的k。</p><p>输入</p><p>一个非负整数c，c的位数&lt;=30。</p><p>输出</p><p>若存在满足 c%k == 0 的k，从小到大输出所有这样的k，相邻两个数之间用单个空格隔开；若没有这样的k，则输出”none”。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><h4 id="这是高精度除于单精度的题目，从高位到低位依次除以k，求余数，如果最后余数为0，说明能被k整除。"><a href="#这是高精度除于单精度的题目，从高位到低位依次除以k，求余数，如果最后余数为0，说明能被k整除。" class="headerlink" title="这是高精度除于单精度的题目，从高位到低位依次除以k，求余数，如果最后余数为0，说明能被k整除。"></a>这是高精度除于单精度的题目，从高位到低位依次除以k，求余数，如果最后余数为0，说明能被k整除。</h4><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> len = s.length(); </span><br><span class="line"><span class="comment">//因为除是从高位往低位所以从高到低进行存储</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"> a[i] = s[i] - <span class="string">'0'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= <span class="number">9</span>; k++) &#123;</span><br><span class="line"> <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"> t = t * <span class="number">10</span> + a[i];</span><br><span class="line"> t %= k;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span>) &#123;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"> flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"none"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--字符串移位包含问题</title>
      <link href="/2020/02/02/NOI--%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A7%BB%E4%BD%8D%E5%8C%85%E5%90%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/02/NOI--%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A7%BB%E4%BD%8D%E5%8C%85%E5%90%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="19-字符串移位包含问题"><a href="#19-字符串移位包含问题" class="headerlink" title="19:字符串移位包含问题"></a>19:字符串移位包含问题</h2><p>描述</p><p>对于一个字符串来说，定义一次循环移位操作为：将字符串的第一个字符移动到末尾形成新的字符串。</p><p>给定两个字符串s1和s2，要求判定其中一个字符串是否是另一字符串通过若干次循环移位后的新字符串的子串。例如CDAA是由AABCD两次移位后产生的新串BCDAA的子串，而ABCD与ACBD则不能通过多次移位来得到其中一个字符串是新串的子串。</p><p>输入</p><p>一行，包含两个字符串，中间由单个空格隔开。字符串只包含字母和数字，长度不超过30。</p><p>输出</p><p>如果一个字符串是另一字符串通过若干次循环移位产生的新串的子串，则输出true，否则输出false。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AABCD CDAA</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="comment">//为啥直接相加呢因为移位找子串其实就是两个字符串相加，操作也挺简单的</span></span><br><span class="line"><span class="built_in">string</span> s3 = s1 + s1;</span><br><span class="line"><span class="built_in">string</span> s4 = s2 + s2;</span><br><span class="line">    <span class="comment">//之前WA了三次，原因是并没有理解题目中是求一个串是否包含另一个串而我只考虑了s1串包含s2</span></span><br><span class="line"><span class="keyword">if</span>(s3.<span class="built_in">find</span>(s2)!=<span class="number">-1</span>&amp;&amp;s1.<span class="built_in">size</span>()&gt;=s2.<span class="built_in">size</span>()) <span class="built_in">cout</span>&lt;&lt;<span class="string">"true"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s4.<span class="built_in">find</span>(s1)!=<span class="number">-1</span>&amp;&amp;s1.<span class="built_in">size</span>()&lt;s2.<span class="built_in">size</span>()) <span class="built_in">cout</span>&lt;&lt;<span class="string">"true"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"false"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--求10000以内n的阶乘</title>
      <link href="/2020/02/02/NOI--%E6%B1%8210000%E4%BB%A5%E5%86%85n%E7%9A%84%E9%98%B6%E4%B9%98/"/>
      <url>/2020/02/02/NOI--%E6%B1%8210000%E4%BB%A5%E5%86%85n%E7%9A%84%E9%98%B6%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<h2 id="14-求10000以内n的阶乘"><a href="#14-求10000以内n的阶乘" class="headerlink" title="14:求10000以内n的阶乘"></a>14:求10000以内n的阶乘</h2><p>描述</p><p>求10000以内n的阶乘。</p><p>输入</p><p>只有一行输入，整数n（0&lt;=n&lt;=10000）。</p><p>输出</p><p>一行，即n!的值。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span></span><br></pre></td></tr></table></figure><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h4 id="由低位到高位计算每一位数字与i相乘的数再依次进位，这里要注意的是算出的最高位的数不一定是2位数，也可以用万进制来计算。"><a href="#由低位到高位计算每一位数字与i相乘的数再依次进位，这里要注意的是算出的最高位的数不一定是2位数，也可以用万进制来计算。" class="headerlink" title="由低位到高位计算每一位数字与i相乘的数再依次进位，这里要注意的是算出的最高位的数不一定是2位数，也可以用万进制来计算。"></a>由低位到高位计算每一位数字与i相乘的数再依次进位，这里要注意的是算出的最高位的数不一定是2位数，也可以用万进制来计算。</h4><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= a[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">a[j] = a[j] * i + x;</span><br><span class="line">x = a[j] / <span class="number">10</span>;</span><br><span class="line">a[j] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//注意的是算出的最高位的数不一定是2位数，因为之前这里我用的if来判断只能计算到32！</span></span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>) &#123;</span><br><span class="line">a[a[<span class="number">0</span>]+<span class="number">1</span>] += x % <span class="number">10</span>;</span><br><span class="line">++a[<span class="number">0</span>];</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--计算2的N次方</title>
      <link href="/2020/02/01/NOI--%E8%AE%A1%E7%AE%972%E7%9A%84N%E6%AC%A1%E6%96%B9/"/>
      <url>/2020/02/01/NOI--%E8%AE%A1%E7%AE%972%E7%9A%84N%E6%AC%A1%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="12-计算2的N次方"><a href="#12-计算2的N次方" class="headerlink" title="12:计算2的N次方"></a>12:计算2的N次方</h2><p>描述</p><p>任意给定一个正整数N(N&lt;=100)，计算2的n次方的值。</p><p>输入</p><p>输入一个正整数N。</p><p>输出</p><p>输出2的N次方的值。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><h4 id="这是高精度×单精度的题目，由于要考虑进位所以从低位到高位上的数字依次乘2，然后再逐位判断是否进位。"><a href="#这是高精度×单精度的题目，由于要考虑进位所以从低位到高位上的数字依次乘2，然后再逐位判断是否进位。" class="headerlink" title="这是高精度×单精度的题目，由于要考虑进位所以从低位到高位上的数字依次乘2，然后再逐位判断是否进位。"></a>这是高精度×单精度的题目，由于要考虑进位所以从低位到高位上的数字依次乘2，然后再逐位判断是否进位。</h4><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="comment">//a[0]用来存储位数</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//a[1]为了方便下面计算a[1]位上的数</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">//由低位到高位依次计算每一位上的数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)&#123;</span><br><span class="line">a[i] *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//判断每一位是否需要进位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">a[i] %= <span class="number">10</span>;</span><br><span class="line">a[i+<span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//最高位如果进位了，位数需要加1</span></span><br><span class="line"><span class="keyword">if</span>(a[a[<span class="number">0</span>]+<span class="number">1</span>]) ++a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--单词倒排</title>
      <link href="/2020/01/31/NOI--%E5%8D%95%E8%AF%8D%E5%80%92%E6%8E%92/"/>
      <url>/2020/01/31/NOI--%E5%8D%95%E8%AF%8D%E5%80%92%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<h2 id="28-单词倒排"><a href="#28-单词倒排" class="headerlink" title="28:单词倒排"></a>28:单词倒排</h2><p>描述</p><p>编写程序，读入一行英文(只包含字母和空格，单词间以单个空格分隔)，将所有单词的顺序倒排并输出，依然以单个空格分隔。</p><p>输入</p><p>输入为一个字符串（字符串长度至多为100）。</p><p>输出</p><p>输出为按要求排序后的字符串。</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am a student</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student a am I</span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s,str;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">getline(<span class="built_in">cin</span>,str);</span><br><span class="line">len = str.length();</span><br><span class="line">s+=<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">s+=str[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = s.length()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] != <span class="string">' '</span>)&#123;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p = i+<span class="number">1</span>;p&lt;=j;p++) <span class="built_in">cout</span>&lt;&lt;s[p];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">j = i<span class="number">-1</span>;</span><br><span class="line">--i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--单词翻转</title>
      <link href="/2020/01/31/NOI--%E5%8D%95%E8%AF%8D%E7%BF%BB%E8%BD%AC/"/>
      <url>/2020/01/31/NOI--%E5%8D%95%E8%AF%8D%E7%BF%BB%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="27-单词翻转"><a href="#27-单词翻转" class="headerlink" title="27:单词翻转"></a>27:单词翻转</h2><p>描述</p><p>输入一个句子（一行），将句子中的每一个单词翻转后输出。</p><p>输入</p><p>只有一行，为一个字符串，不超过500个字符。单词之间以空格隔开。</p><p>输出</p><p>翻转每一个单词后的字符串，单词之间的空格需与原文一致。</p><p>样例输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">olleh dlrow</span><br></pre></td></tr></table></figure><p>//这个题其实和单词倒排差不多，一个星期前做这个题的时候PE了六次，把单词倒排AC之后再去做这个题特别快。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="keyword">int</span> len = s.length();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = j;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=len)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j] != <span class="string">' '</span>&amp;&amp;s[j] != <span class="string">'\0'</span>)&#123;</span><br><span class="line">++j;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[j]==<span class="string">' '</span>||s[j]==<span class="string">'\0'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=i;k--)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">++j;</span><br><span class="line">i = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--字符环</title>
      <link href="/2020/01/31/NOI--%E5%AD%97%E7%AC%A6%E7%8E%AF/"/>
      <url>/2020/01/31/NOI--%E5%AD%97%E7%AC%A6%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="30-字符环"><a href="#30-字符环" class="headerlink" title="30:字符环"></a>30:字符环</h2><p>描述</p><p>有两个由字符构成的环。请写一个程序，计算这两个字符环上最长连续公共字符串的长度。例如，字符串“ABCEFAGADEGKABUVKLM”的首尾连在一起，构成一个环；字符串“MADJKLUVKL”的首尾连在一起，构成一个另一个环；“UVKLMA”是这两个环的一个连续公共字符串。</p><p>输入</p><p>一行，包含两个字符串，分别对应一个字符环。这两个字符串之间用单个空格分开。字符串长度不超过255，且不包含空格等空白符。</p><p>输出</p><p>输出一个整数，表示这两个字符环上最长公共字符串的长度。</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABCEFAGADEGKABUVKLM MADJKLUVKL</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s,str;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">getline(<span class="built_in">cin</span>,str);</span><br><span class="line">len = str.length();</span><br><span class="line">s+=<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">s+=str[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = s.length()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] != <span class="string">' '</span>)&#123;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p = i+<span class="number">1</span>;p&lt;=j;p++) <span class="built_in">cout</span>&lt;&lt;s[p];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">j = i<span class="number">-1</span>;</span><br><span class="line">--i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--第n小的质数</title>
      <link href="/2020/01/29/NOI--%E7%AC%ACn%E5%B0%8F%E7%9A%84%E8%B4%A8%E6%95%B0/"/>
      <url>/2020/01/29/NOI--%E7%AC%ACn%E5%B0%8F%E7%9A%84%E8%B4%A8%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="44-第n小的质数"><a href="#44-第n小的质数" class="headerlink" title="44:第n小的质数"></a>44:第n小的质数</h2><p>描述</p><p>输入一个正整数n，求第n小的质数。</p><p>输入</p><p>一个不超过10000的正整数n。</p><p>输出</p><p>第n小的质数。</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">29</span><br></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">bool isprime(int x)&#123;</span><br><span class="line">if(x&#x3D;&#x3D;1) return false;</span><br><span class="line">else if(x &#x3D;&#x3D; 2) return true;</span><br><span class="line">else &#123;</span><br><span class="line">for(int i&#x3D;2;i&lt;&#x3D;sqrt(x);i++)&#123;</span><br><span class="line">if(x%i&#x3D;&#x3D;0) return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">int s &#x3D; 0;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;1000000;i++)&#123;</span><br><span class="line">if(isprime(i)) ++s;</span><br><span class="line">if(s &#x3D;&#x3D; n)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索专题</title>
      <link href="/2020/01/28/ACM%E8%AE%AD%E7%BB%83--%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
      <url>/2020/01/28/ACM%E8%AE%AD%E7%BB%83--%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>之前虽然学过搜索，感觉忘了很多，所以写一遍博客来回忆一下。</p><p>深度优先搜索（DFS)和广度优先搜索(BFS)是基本的暴力技术。</p><p>一般来说用队列这种数据结构来实现BFS,用栈这种数据结构来实现DFS（用递归来实现)。</p><h4 id="经典BFS："><a href="#经典BFS：" class="headerlink" title="经典BFS："></a>经典BFS：</h4><p>贴一个🔗<a href="http://lx.lanqiao.cn/problem.page?gpid=T291" target="_blank" rel="noopener">http://lx.lanqiao.cn/problem.page?gpid=T291</a></p><h6 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">int</span> maze[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="comment">//下左右上 </span></span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> r[<span class="number">4</span>] = &#123;<span class="string">'D'</span>, <span class="string">'L'</span>, <span class="string">'R'</span>, <span class="string">'U'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line"><span class="built_in">string</span> road;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n  &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m &amp;&amp; !vis[x][y] &amp;&amp; maze[x][y] == <span class="number">0</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </span><br><span class="line"><span class="built_in">queue</span> &lt;node&gt; q;</span><br><span class="line">node st, ne;</span><br><span class="line">st.x = x;</span><br><span class="line">st.y = y;</span><br><span class="line">st.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">st.road = <span class="string">""</span>;</span><br><span class="line">vis[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(st);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">st = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(st.x == n - <span class="number">1</span> &amp;&amp; st.y == m - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; st.<span class="built_in">step</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; st.road &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">ne.x = st.x + dir[i][<span class="number">0</span>];</span><br><span class="line">ne.y = st.y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(check(ne.x, ne.y)) &#123;</span><br><span class="line">vis[ne.x][ne.y] = <span class="literal">true</span>;</span><br><span class="line">ne.<span class="built_in">step</span> = st.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">ne.road = st.road + r[i];</span><br><span class="line">q.push(ne);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="comment">//这个地方我感觉还是有点坑的，测试数据连续输入不加空格</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;maze[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深搜 </tag>
            
            <tag> 广搜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--铺地毯</title>
      <link href="/2020/01/28/NOI--%E9%93%BA%E5%9C%B0%E6%AF%AF/"/>
      <url>/2020/01/28/NOI--%E9%93%BA%E5%9C%B0%E6%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h2 id="铺地毯"><a href="#铺地毯" class="headerlink" title="铺地毯"></a>铺地毯</h2><ul><li><p>总时间限制: </p><p>1000ms</p></li><li><p>内存限制: </p><p>65536kB</p></li><li><p>描述</p><p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有n张地毯，编号从1到n。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。输入输出样例1说明：如下图，1号地毯用实线表示，2号地毯用虚线表示，3号用双实线表示，覆盖点（2，2）的最上面一张地毯是3号地毯。输入输出样例2说明：如下图，1号地毯用实线表示，2号地毯用虚线表示，3号用双实线表示，覆盖点（4，5）的最上面一张地毯是3号地毯。 <img src="http://media.openjudge.cn/images/upload/1423035598.png" alt="img">  </p></li><li><p>输入</p><p>输入共n+2行。 第一行，一个整数n，表示总共有n张地毯。 接下来的n行中，第i+1行表示编号i的地毯的信息，包含四个正整数a，b，g，k，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标（a，b）以及地毯在x轴和y轴方向的长度。 第n+2行包含两个正整数x和y，表示所求的地面的点的坐标（x，y）。  对于30%的数据，有n≤2； 对于50%的数据，0≤a, b, g, k≤100； 对于100%的数据，有0≤n≤10,000，0≤a, b, g, k≤100,000。</p></li><li><p>输出</p><p>输出共1行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出-1。</p></li><li><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">样例 #1：</span><br><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">2 2</span><br><span class="line"></span><br><span class="line">样例 #2：</span><br><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样例 #1：</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">样例 #2：</span><br><span class="line">-1</span><br></pre></td></tr></table></figure></li></ul><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N &#x3D; 100001;</span><br><span class="line"></span><br><span class="line">int a[N];</span><br><span class="line">int b[N];</span><br><span class="line">int g[N];</span><br><span class="line">int k[N];</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">int x,y;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;g[i]&gt;&gt;k[i];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">for(int i&#x3D;n;i&gt;&#x3D;1;i--)&#123;</span><br><span class="line">if(x&gt;&#x3D;a[i]&amp;&amp;x&lt;&#x3D;a[i]+g[i]&amp;&amp;y&gt;&#x3D;b[i]&amp;&amp;y&lt;&#x3D;b[i]+k[i])&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--找最大数序列</title>
      <link href="/2020/01/21/NOI--1.9-10%E6%89%BE%E6%9C%80%E5%A4%A7%E6%95%B0%E5%BA%8F%E5%88%97/"/>
      <url>/2020/01/21/NOI--1.9-10%E6%89%BE%E6%9C%80%E5%A4%A7%E6%95%B0%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h5 id="10-找最大数序列"><a href="#10-找最大数序列" class="headerlink" title="10:找最大数序列"></a>10:找最大数序列</h5><ul><li><p>总时间限制: </p><p>1000ms</p></li><li><p>内存限制: </p><p>65536kB</p></li><li><p>描述</p><p>输入n行，每行不超过100个无符号整数，无符号数不超过4位。请输出最大整数以及最大整数所在的行号（行号从1开始）。如果该数据在多个行中出现，则按从小到大输出相应行号，行号之间以一个逗号分开。 </p></li><li><p>输入</p><p>一行输入一个正整数n（n &lt;= 30）。 之后的n行，每行包含不超过100个无符号整数，整数之间以一个逗号分开。</p></li><li><p>输出</p><p>第一行：最大整数； </p><p>第二行：最大整数所在的行编号，逗号间隔。</p></li><li><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1,3,5,23,6,8,14</span><br><span class="line">20,22,13,4,16</span><br><span class="line">23,12,17,22</span><br><span class="line">2,6,10,9,3,6</span><br><span class="line">22,21,20,8,10</span><br><span class="line">22,1,23,6,8,19,23</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">23</span><br><span class="line">1,3,6</span><br></pre></td></tr></table></figure></li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><p>   注意一下输入格式。</p><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N &#x3D; 10000;</span><br><span class="line"></span><br><span class="line">int a[N];</span><br><span class="line">int b[N];</span><br><span class="line">int d[N];</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">char c;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">memset(a,0,sizeof(a));</span><br><span class="line">int j&#x3D;0;</span><br><span class="line">    do&#123;</span><br><span class="line">    cin&gt;&gt;a[j++];</span><br><span class="line">&#125;while(getchar()!&#x3D;&#39;\n&#39;);</span><br><span class="line">  sort(a,a+j);</span><br><span class="line">b[i] &#x3D; a[j-1];</span><br><span class="line">&#125;</span><br><span class="line">int max &#x3D; -1;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">if(b[i]&gt;max) max &#x3D; b[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;max&lt;&lt;endl;</span><br><span class="line">int k&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">if(b[i]&#x3D;&#x3D;max) d[k++] &#x3D; i+1;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;d[0];</span><br><span class="line">for(int i&#x3D;1;i&lt;k;i++)&#123;</span><br><span class="line">cout&lt;&lt;&quot;,&quot;&lt;&lt;d[i];</span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI--错误探测</title>
      <link href="/2020/01/21/NOI--%E9%94%99%E8%AF%AF%E6%8E%A2%E6%B5%8B/"/>
      <url>/2020/01/21/NOI--%E9%94%99%E8%AF%AF%E6%8E%A2%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="04-错误探测"><a href="#04-错误探测" class="headerlink" title="04:错误探测"></a>04:错误探测</h2><ul><li><p>总时间限制: </p><p>1000ms</p></li><li><p>内存限制: </p><p>65536kB</p></li><li><p>描述</p><p>给定n*n由0和1组成的矩阵，如果矩阵的每一行和每一列的1的数量都是偶数，则认为符合条件。 你的任务就是检测矩阵是否符合条件，或者在仅改变一个矩阵元素的情况下能否符合条件。 “改变矩阵元素”的操作定义为0变成1或者1变成0。 </p></li><li><p>输入</p><p>输入n + 1行，第1行为矩阵的大小n(0 &lt; n &lt; 100)，以下n行为矩阵的每一行的元素，元素之间以一个空格分开。</p></li><li><p>输出</p><p>如果矩阵符合条件，则输出OK； 如果矩阵仅改变一个矩阵元素就能符合条件，则输出需要改变的元素所在的行号和列号，以一个空格分开。 如果不符合以上两条，输出Corrupt。</p></li><li><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">样例输入1</span><br><span class="line">4</span><br><span class="line">1 0 1 0</span><br><span class="line">0 0 0 0</span><br><span class="line">1 1 1 1</span><br><span class="line">0 1 0 1</span><br><span class="line"></span><br><span class="line">样例输入2</span><br><span class="line">4</span><br><span class="line">1 0 1 0</span><br><span class="line">0 0 1 0</span><br><span class="line">1 1 1 1</span><br><span class="line">0 1 0 1</span><br><span class="line"></span><br><span class="line">样例输入3</span><br><span class="line">4</span><br><span class="line">1 0 1 0</span><br><span class="line">0 1 1 0</span><br><span class="line">1 1 1 1</span><br><span class="line">0 1 0 1</span><br></pre></td></tr></table></figure></li><li><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">样例输出1</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">样例输出2</span><br><span class="line">2 3</span><br><span class="line"></span><br><span class="line">样例输出3</span><br><span class="line">Corrupt</span><br></pre></td></tr></table></figure></li></ul><h3 id="WA代码："><a href="#WA代码：" class="headerlink" title="WA代码："></a>WA代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int M &#x3D; 100+5;</span><br><span class="line">const int N &#x3D; 100+5;</span><br><span class="line"></span><br><span class="line">int a[M][N]&#x3D;&#123;0&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">int c &#x3D; 0,r &#x3D; 0;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">a[0][j] &#x3D; (a[0][j]+a[i][j])%2;&#x2F;&#x2F;感觉这个地方还是很巧妙的(get)</span><br><span class="line">a[i][0] &#x3D; (a[i][0]+a[i][j])%2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;</span><br><span class="line">if(a[0][j]&#x3D;&#x3D;1) r &#x3D; j;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">if(a[i][0]&#x3D;&#x3D;1) c &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">if(c&#x3D;&#x3D;0&amp;&amp;r&#x3D;&#x3D;0) cout&lt;&lt;&quot;OK&quot;&lt;&lt;endl;</span><br><span class="line">else if(c!&#x3D;0&amp;&amp;r!&#x3D;0)cout&lt;&lt;c&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">else cout&lt;&lt;&quot;Corrupt&quot;&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉思路也没什么问题，写了几组数据测试发现其中一组数据有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 0 0 0</span><br><span class="line">1 1 0 1</span><br><span class="line">0 0 0 1</span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><p>当有多行/列为奇数时，只返回第一组检测的序号。（其实这个时候应该是Corrupt)</p><p>所以应该增加两个变量来记录行或列为奇数的行数/列数。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int M &#x3D; 100+5;</span><br><span class="line">const int N &#x3D; 100+5;</span><br><span class="line"></span><br><span class="line">int a[M][N]&#x3D;&#123;0&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">int c &#x3D; 0,r &#x3D; 0,c1 &#x3D; 0,r1 &#x3D; 0;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">a[0][j] &#x3D; (a[0][j]+a[i][j])%2;</span><br><span class="line">a[i][0] &#x3D; (a[i][0]+a[i][j])%2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123;</span><br><span class="line">if(a[0][j]&#x3D;&#x3D;1)&#123;</span><br><span class="line">r &#x3D; j;</span><br><span class="line">r1++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">if(a[i][0]&#x3D;&#x3D;1)&#123;</span><br><span class="line">c &#x3D; i;</span><br><span class="line">c1++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(c1&#x3D;&#x3D;0&amp;&amp;r1&#x3D;&#x3D;0) cout&lt;&lt;&quot;OK&quot;&lt;&lt;endl;</span><br><span class="line">else if(c1&#x3D;&#x3D;1&amp;&amp;r1&#x3D;&#x3D;1)cout&lt;&lt;c&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">else cout&lt;&lt;&quot;Corrupt&quot;&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园导航</title>
      <link href="/2020/01/10/%E6%A0%A1%E5%9B%AD%E5%AF%BC%E8%88%AA/"/>
      <url>/2020/01/10/%E6%A0%A1%E5%9B%AD%E5%AF%BC%E8%88%AA/</url>
      
        <content type="html"><![CDATA[<h2 id="校园导航-STD"><a href="#校园导航-STD" class="headerlink" title="校园导航-STD"></a>校园导航-STD</h2><p>这是之前数据结构做的一个图的实验。</p><h4 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h4><p>图是应用极为广泛的数据结构，也是这门课程的重点。它的特点在于非线性。稀疏矩阵 的十字链表存储结构也是图的一种存储结构，故也把它们归在这次实习中。本 章 实习继续突 出了数据结构加操作的程序设计观点，但根据这两种结构的非线性特点，将 操 作 进一步集中 在遍历操作上，因为遍历操作是其他众多操作的基础。遍历逻辑的（或符号形式的）结构， 访问动作可是任何操作。本 次 实习还希望达到熟悉各种存储结构的特征，以及如何应用树和 图结构解决具体问题（即原理与应用的结合）等目的。 </p><p>图的基本操作 </p><p>[问题描述]  </p><p>分别用邻接矩阵和邻接表实现以下操作：图的创建、遍历、插入、删除、最短路径。</p><p>[基本要求] </p><p>熟悉图的常用存储结构和基本操作</p><h4 id="二、设计思路"><a href="#二、设计思路" class="headerlink" title="二、设计思路"></a>二、设计思路</h4><p>先构造数据</p><p>所有地点:春晖楼 开元楼 图书馆 十栋 基教 学院楼 消社</p><p>任意两个地点的路径长度： </p><p>春晖楼 开元楼 50</p><p>春晖楼 图书馆 300</p><p>春晖楼 基教 400</p><p>开元楼 基教 200</p><p>基教 学院楼 50</p><p>学院楼 图书馆 10</p><p>十栋 开元楼 250</p><p>十栋 消社 20</p><p>消社 基教 100</p><p>增加的地点:</p><p>消社 招待所 700</p><p>学院楼 招待所 450</p><p>构建一个无向网</p><p> 用邻接矩阵来存储任意两个地点的关系。</p><p>图的遍历用DFS递归来输出地点，任意两点间的最短路径用弗洛伊德算法。</p><h4 id="三、代码："><a href="#三、代码：" class="headerlink" title="三、代码："></a>三、代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define MaxInt 32767</span><br><span class="line">#define MVNum 100</span><br><span class="line"></span><br><span class="line">typedef string VerTexType;</span><br><span class="line">typedef int ArcType;</span><br><span class="line"></span><br><span class="line">int vis[MVNum]&#x3D;&#123;0&#125;;</span><br><span class="line">int n&#x3D;0;</span><br><span class="line">int Path[MVNum][MVNum];</span><br><span class="line">int D[MVNum][MVNum];</span><br><span class="line"></span><br><span class="line">typedef struct&#123;</span><br><span class="line">VerTexType vexs[MVNum];</span><br><span class="line">ArcType arcs[MVNum][MVNum];</span><br><span class="line">int vexnum,arcnum;</span><br><span class="line">&#125;AMGraph;</span><br><span class="line"></span><br><span class="line">int LocateVex(AMGraph G,string u)&#123;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123;</span><br><span class="line">if(u&#x3D;&#x3D;G.vexs[i]) &#123;</span><br><span class="line">    return i;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br><span class="line">    else continue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Create(AMGraph &amp;G)&#123;</span><br><span class="line">int w;</span><br><span class="line">string v1,v2;</span><br><span class="line">printf(&quot;请输入总地点数和路径数:&quot;);</span><br><span class="line">cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;</span><br><span class="line">printf(&quot;请输入所有地点:\n&quot;);&#x2F;&#x2F;春晖楼 开元楼 图书馆 十栋 基教 学院楼消社 </span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123; </span><br><span class="line">cin&gt;&gt;G.vexs[i];</span><br><span class="line">&#125; </span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)</span><br><span class="line">for(int j&#x3D;1;j&lt;&#x3D;G.vexnum;j++)</span><br><span class="line">    G.arcs[i][j]&#x3D;MaxInt;</span><br><span class="line">for(int k&#x3D;1;k&lt;&#x3D;G.arcnum;k++)&#123;</span><br><span class="line">printf(&quot;请输入两个地点及其路径:&quot;);</span><br><span class="line">    cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;w;</span><br><span class="line">int m&#x3D;LocateVex(G,v1);</span><br><span class="line">int n&#x3D;LocateVex(G,v2);</span><br><span class="line">G.arcs[m][n]&#x3D;w;</span><br><span class="line">G.arcs[n][m]&#x3D;w;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">void Display(AMGraph G,int v)&#123;</span><br><span class="line">if(n&gt;G.vexnum) return;</span><br><span class="line">if(!vis[v])&#123;</span><br><span class="line">vis[v]&#x3D;1;</span><br><span class="line">    cout&lt;&lt;G.vexs[v]&lt;&lt;&quot; &quot;;</span><br><span class="line">    for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123;</span><br><span class="line">    if(G.arcs[v][i]!&#x3D;MaxInt&amp;&amp;vis[i]&#x3D;&#x3D;0) &#123;</span><br><span class="line">    n++;</span><br><span class="line">    Display(G,i);</span><br><span class="line">&#125;</span><br><span class="line">else continue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Insert(AMGraph &amp;G)&#123;</span><br><span class="line">int w;</span><br><span class="line">string v1,v2;</span><br><span class="line">printf(&quot;请输入你要增加的地点和路径的数目:&quot;);</span><br><span class="line">int p,q;</span><br><span class="line">cin&gt;&gt;p&gt;&gt;q;</span><br><span class="line">int t&#x3D;G.vexnum;</span><br><span class="line">G.vexnum+&#x3D;p;</span><br><span class="line">G.arcnum+&#x3D;q;</span><br><span class="line">for(int k&#x3D;t+1;k&lt;&#x3D;G.vexnum;k++)&#123;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)</span><br><span class="line">    G.arcs[i][k]&#x3D;MaxInt;</span><br><span class="line">for(int j&#x3D;1;j&lt;&#x3D;G.vexnum;j++)</span><br><span class="line">    G.arcs[k][j]&#x3D;MaxInt;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;&quot;请输入增加的地点:&quot;;</span><br><span class="line">for(int i&#x3D;t+1;i&lt;&#x3D;G.vexnum;i++)</span><br><span class="line">cin&gt;&gt;G.vexs[i];</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;q;i++)&#123;</span><br><span class="line">printf(&quot;请输入两个地点及其路径:&quot;);</span><br><span class="line">    cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;w;</span><br><span class="line">    int m&#x3D;LocateVex(G,v1);</span><br><span class="line">    int n&#x3D;LocateVex(G,v2);</span><br><span class="line">    G.arcs[m][n]&#x3D;w;</span><br><span class="line">    G.arcs[n][m]&#x3D;w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Delete(AMGraph &amp;G)&#123;</span><br><span class="line">int l&#x3D;0;</span><br><span class="line">string u;</span><br><span class="line">cout&lt;&lt;&quot;请输入要删除的地点:&quot;;</span><br><span class="line">cin&gt;&gt;u;</span><br><span class="line">int t&#x3D;LocateVex(G,u);</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123;</span><br><span class="line">if(G.arcs[t][i]!&#x3D;MaxInt) l++;</span><br><span class="line">&#125;</span><br><span class="line">G.arcnum-&#x3D;l;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123;</span><br><span class="line">G.arcs[i][t]&#x3D;MaxInt;</span><br><span class="line">G.arcs[t][i]&#x3D;MaxInt;</span><br><span class="line">&#125;</span><br><span class="line">G.vexs[t]&#x3D;&quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Floyd(AMGraph G)</span><br><span class="line">&#123;</span><br><span class="line">int i,j,k;</span><br><span class="line">for (i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)</span><br><span class="line">for (j&#x3D;1;j&lt;&#x3D;G.vexnum;j++)</span><br><span class="line">&#123;</span><br><span class="line">D[i][j] &#x3D; G.arcs[i][j];</span><br><span class="line">if (D[i][j]&lt;MaxInt &amp;&amp; i!&#x3D;j)</span><br><span class="line"> Path[i][j] &#x3D; i;</span><br><span class="line">else Path[i][j] &#x3D; -1;</span><br><span class="line">&#125;</span><br><span class="line">for(k&#x3D;1;k&lt;&#x3D;G.vexnum;k++)</span><br><span class="line">for(i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)</span><br><span class="line">for(j&#x3D;1;j&lt;&#x3D;G.vexnum;j++)</span><br><span class="line">if(D[i][k]+D[k][j]&lt;D[i][j])</span><br><span class="line">&#123;</span><br><span class="line">D[i][j] &#x3D; D[i][k] + D[k][j];</span><br><span class="line">Path[i][j] &#x3D; Path[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void ShortPath(AMGraph G)</span><br><span class="line">&#123;</span><br><span class="line">string s1,s2;</span><br><span class="line">int vs,ve,x,temp;</span><br><span class="line">cout&lt;&lt;&quot;请输入起点和终点:&quot;;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">vs&#x3D;LocateVex(G,s1);</span><br><span class="line">ve&#x3D;LocateVex(G,s2);</span><br><span class="line">cout&lt;&lt;&quot;最短路径长为：&quot;;</span><br><span class="line">cout&lt;&lt;D[vs][ve]&lt;&lt;endl;</span><br><span class="line">stack&lt;int&gt; sta;</span><br><span class="line">sta.push(ve);</span><br><span class="line">x &#x3D; ve;</span><br><span class="line">while (Path[vs][x]!&#x3D;vs)</span><br><span class="line">&#123;</span><br><span class="line">sta.push(Path[vs][x]);</span><br><span class="line">x &#x3D; Path[vs][x];</span><br><span class="line">&#125;</span><br><span class="line">sta.push(vs);</span><br><span class="line">cout&lt;&lt;&quot;最短路径为: &quot;;</span><br><span class="line">temp &#x3D; sta.top();</span><br><span class="line">sta.pop();</span><br><span class="line">cout&lt;&lt;G.vexs[temp];</span><br><span class="line">while (!sta.empty())</span><br><span class="line">&#123;</span><br><span class="line">temp &#x3D; sta.top();</span><br><span class="line">sta.pop();</span><br><span class="line">cout&lt;&lt;&quot;-&gt;&quot;&lt;&lt;G.vexs[temp];</span><br><span class="line">&#125;</span><br><span class="line">puts(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void menu()&#123;</span><br><span class="line">cout&lt;&lt;&quot;*********************************************************&quot;&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;-----------------石家庄铁道大学校园导航------------------&quot;&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;*********************************************************&quot;&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;*                    1.  图的创建                       *&quot;&lt;&lt;endl; </span><br><span class="line">cout&lt;&lt;&quot;*                    2.  图的遍历                       *&quot;&lt;&lt;endl; </span><br><span class="line">cout&lt;&lt;&quot;*                    3.  图的插入                       *&quot;&lt;&lt;endl; </span><br><span class="line">cout&lt;&lt;&quot;*                    4.  图的删除                       *&quot;&lt;&lt;endl; </span><br><span class="line">cout&lt;&lt;&quot;*                    5.  最短路径                       *&quot;&lt;&lt;endl; </span><br><span class="line">cout&lt;&lt;&quot;*                    0. 返回主界面                      *&quot;&lt;&lt;endl; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">AMGraph G;</span><br><span class="line">int k;</span><br><span class="line">int t1,t2,t3;</span><br><span class="line">string v,u;</span><br><span class="line">menu();</span><br><span class="line">while(1)&#123;</span><br><span class="line">cout&lt;&lt;&quot;请选择:&quot;&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line">switch (k)&#123;</span><br><span class="line">case 1:</span><br><span class="line">Create(G);break;</span><br><span class="line">case 2:</span><br><span class="line">        printf(&quot;请输入出发点:&quot;);</span><br><span class="line">        cin&gt;&gt;v;</span><br><span class="line">         cout&lt;&lt;&quot;从出发点开始遍历的路线为:&quot;;</span><br><span class="line">        t1&#x3D;LocateVex(G,v);</span><br><span class="line">          Display(G,t1);</span><br><span class="line">          cout&lt;&lt;endl;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">    Insert(G);</span><br><span class="line">        printf(&quot;请输入出发点:&quot;);</span><br><span class="line">cin&gt;&gt;u;</span><br><span class="line">cout&lt;&lt;&quot;从出发点开始遍历的路线为:&quot;;</span><br><span class="line">t2&#x3D;LocateVex(G,u);</span><br><span class="line">n&#x3D;0;</span><br><span class="line">memset(vis,0,sizeof(vis));</span><br><span class="line">    Display(G,t2);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 4:</span><br><span class="line">    Delete(G);</span><br><span class="line">    printf(&quot;请输入出发点:&quot;);</span><br><span class="line">cin&gt;&gt;u;</span><br><span class="line">cout&lt;&lt;&quot;从出发点开始遍历的路线为:&quot;;</span><br><span class="line">t3&#x3D;LocateVex(G,u);</span><br><span class="line">    n&#x3D;0;</span><br><span class="line">memset(vis,0,sizeof(vis));</span><br><span class="line">    Display(G,t3);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 5:</span><br><span class="line">    Floyd(G);</span><br><span class="line">    ShortPath(G);</span><br><span class="line">    break;</span><br><span class="line">    case 0:</span><br><span class="line">    menu();</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、功能测试"><a href="#四、功能测试" class="headerlink" title="四、功能测试"></a>四、功能测试</h4><p><img src="file:///C:/Users/XieYW/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><p><img src="file:///C:/Users/XieYW/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--二叉搜索树</title>
      <link href="/2019/12/08/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>/2019/12/08/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-A-Bug’s-Life"><a href="#题目-A-Bug’s-Life" class="headerlink" title="题目 -  A Bug’s Life"></a>题目 -  A Bug’s Life</h2><p><strong>Background</strong><br>Professor Hopper is researching the sexual behavior of a rare species of bugs. He assumes that they feature two different genders and that they only interact with bugs of the opposite gender. In his experiment, individual bugs and their interactions were easy to identify, because numbers were printed on their backs.<br><strong>Problem</strong><br>Given a list of bug interactions, decide whether the experiment supports his assumption of two genders with no homosexual bugs or if it contains some bug interactions that falsify it.</p><p>Input</p><p>The first line of the input contains the number of scenarios. Each scenario starts with one line giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to 1000000) separated by a single space. In the following lines, each interaction is given in the form of two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting from one.</p><p>Output</p><p>The output for every scenario is a line containing “Scenario #i:”, where i is the number of the scenario starting at 1, followed by one line saying either “No suspicious bugs found!” if the experiment is consistent with his assumption about the bugs’ sexual behavior, or “Suspicious bugs found!” if Professor Hopper’s assumption is definitely wrong.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">1 3</span><br><span class="line">4 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scenario #1:</span><br><span class="line">Suspicious bugs found!</span><br><span class="line"></span><br><span class="line">Scenario #2:</span><br><span class="line">No suspicious bugs found!</span><br></pre></td></tr></table></figure><p>Hint</p><p>Huge input,scanf is recommended.</p><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>t组数据，n个虫子，m组相互喜爱的关系，虫子分为雌雄两种，每个虫子只有一个性别，问是否存在同性恋的虫子。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>与犯罪团伙那个题差不多。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[20010];</span><br><span class="line">int r[20010];&#x2F;&#x2F;&#x2F;r&#x3D;0代表与根节点同性</span><br><span class="line">int Find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    if(pre[x]&#x3D;&#x3D;x)</span><br><span class="line">    &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    t&#x3D;pre[x];</span><br><span class="line">    pre[x]&#x3D;Find(pre[x]);&#x2F;&#x2F;&#x2F;压缩路径</span><br><span class="line">    r[x]&#x3D;(r[x]+r[t]+1)%2;</span><br><span class="line">    return pre[x];</span><br><span class="line">&#125;</span><br><span class="line">void Union(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int x,y;</span><br><span class="line">    x&#x3D;Find(a);</span><br><span class="line">    y&#x3D;Find(b);</span><br><span class="line">    pre[x]&#x3D;y;</span><br><span class="line">    r[x]&#x3D;(r[b]-r[a])%2;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t,i,j,k,flag;</span><br><span class="line">    int n,m,a,b;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    for(k&#x3D;1;k&lt;&#x3D;t;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag&#x3D;0;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">        for(i&#x3D;1; i&lt;&#x3D;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            r[i]&#x3D;1;</span><br><span class="line">            pre[i]&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i&#x3D;1; i&lt;&#x3D;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">            if(Find(a)&#x3D;&#x3D;Find(b))</span><br><span class="line">            &#123;</span><br><span class="line">                if(r[a]&#x3D;&#x3D;r[b])&#x2F;&#x2F;&#x2F;同性</span><br><span class="line">                &#123;</span><br><span class="line">                    flag&#x3D;1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Union(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Scenario #%d:\nSuspicious bugs found!\n\n&quot;,k);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Scenario #%d:\nNo suspicious bugs found!\n\n&quot;,k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Farm Irrigation</title>
      <link href="/2019/12/04/Farm%20Irrigation%20/"/>
      <url>/2019/12/04/Farm%20Irrigation%20/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Farm-Irrigation"><a href="#题目-Farm-Irrigation" class="headerlink" title="题目 -  Farm Irrigation"></a>题目 -  Farm Irrigation</h2><p>Benny has a spacious farm land to irrigate. The farm land is a rectangle, and is divided into a lot of samll squares. Water pipes are placed in these squares. Different square has a different type of pipe. There are 11 types of pipes, which is marked from A to K, as Figure 1 shows.</p><p><img src="https://vj.z180.cn/98438320b6a336844ea7a50507e0c94c?v=1575336868" alt="img"><br>Figure 1</p><p>Benny has a map of his farm, which is an array of marks denoting the distribution of water pipes over the whole farm. For example, if he has a map</p><p>ADC<br>FJK<br>IHE</p><p>then the water pipes are distributed like</p><p><img src="https://vj.z180.cn/c0c0d1bb80698cbbb549ba460e1ce196?v=1575336868" alt="img"><br>Figure 2</p><p>Several wellsprings are found in the center of some squares, so water can flow along the pipes from one square to another. If water flow crosses one square, the whole farm land in this square is irrigated and will have a good harvest in autumn.</p><p>Now Benny wants to know at least how many wellsprings should be found to have the whole farm land irrigated. Can you help him?</p><p>Note: In the above example, at least 3 wellsprings are needed, as those red points in Figure 2 show.</p><p>Input</p><p>There are several test cases! In each test case, the first line contains 2 integers M and N, then M lines follow. In each of these lines, there are N characters, in the range of ‘A’ to ‘K’, denoting the type of water pipe over the corresponding square. A negative M or N denotes the end of input, else you can assume 1 &lt;= M, N &lt;= 50.</p><p>Output</p><p>For each test case, output in one line the least number of wellsprings needed.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">DK</span><br><span class="line">HF</span><br><span class="line"></span><br><span class="line">3 3</span><br><span class="line">ADC</span><br><span class="line">FJK</span><br><span class="line">IHE</span><br><span class="line"></span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>浇灌田地，图中的蓝色的线代表水管，水管能连起来的用一个泉源即可浇灌，问浇灌这片田地用需要多少个泉源。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>求用的源泉数就是求有几个不连通的图，遍历每块田地，只要考虑它和左边和上边的田地是否能并合并就可以了。对于左边和上边哪两块能够合并，由图可知：</p><p>上联通：ABEGHJK<br>下联通：CDEHIJK<br>左联通：ACFGHIK<br>右联通：BDFGIJK</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N&#x3D;52;</span><br><span class="line">char maze[N][N];</span><br><span class="line">int parent[N*N];</span><br><span class="line">void init(int n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">        parent[i]&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    return parent[x]&#x3D;&#x3D;x?x:find(parent[x]);</span><br><span class="line">&#125;</span><br><span class="line">void unite(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    x&#x3D;find(x);</span><br><span class="line">    y&#x3D;find(y);</span><br><span class="line">    if(x&#x3D;&#x3D;y)</span><br><span class="line">        return;</span><br><span class="line">    parent[x]&#x3D;y;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    while(cin&gt;&gt;n&gt;&gt;m&amp;&amp;n!&#x3D;-1&amp;&amp;m!&#x3D;-1)</span><br><span class="line">    &#123;</span><br><span class="line">        init(n*m);</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">            for(int j&#x3D;1;j&lt;&#x3D;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;maze[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">            for(int j&#x3D;1;j&lt;&#x3D;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(j-1&gt;&#x3D;1)</span><br><span class="line">            &#123;</span><br><span class="line">                if((maze[i][j-1]&#x3D;&#x3D;&#39;B&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;D&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;F&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;G&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;I&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;J&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;K&#39;)</span><br><span class="line">                   &amp;&amp;(maze[i][j]&#x3D;&#x3D;&#39;C&#39;||maze[i][j]&#x3D;&#x3D;&#39;F&#39;||maze[i][j]&#x3D;&#x3D;&#39;G&#39;||maze[i][j]&#x3D;&#x3D;&#39;H&#39;||maze[i][j]&#x3D;&#x3D;&#39;I&#39;||maze[i][j]&#x3D;&#x3D;&#39;A&#39;||maze[i][j]&#x3D;&#x3D;&#39;K&#39;))</span><br><span class="line">                    unite((i-1)*m+j-1,(i-1)*m+j);</span><br><span class="line">            &#125;</span><br><span class="line">            if(i-1&gt;&#x3D;1)</span><br><span class="line">            &#123;</span><br><span class="line">                if((maze[i-1][j]&#x3D;&#x3D;&#39;C&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;D&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;E&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;H&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;I&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;J&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;K&#39;)&amp;&amp;</span><br><span class="line">                   (maze[i][j]&#x3D;&#x3D;&#39;A&#39;||maze[i][j]&#x3D;&#x3D;&#39;B&#39;||maze[i][j]&#x3D;&#x3D;&#39;E&#39;||maze[i][j]&#x3D;&#x3D;&#39;G&#39;||maze[i][j]&#x3D;&#x3D;&#39;H&#39;||maze[i][j]&#x3D;&#x3D;&#39;J&#39;||maze[i][j]&#x3D;&#x3D;&#39;K&#39;))</span><br><span class="line">                    unite((i-1-1)*m+j,(i-1)*m+j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int num&#x3D;0;</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;n*m;i++)</span><br><span class="line">            if(parent[i]&#x3D;&#x3D;i)</span><br><span class="line">            num++;</span><br><span class="line">        cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Is It A Tree?</title>
      <link href="/2019/12/03/Is%20It%20A%20Tree%20/"/>
      <url>/2019/12/03/Is%20It%20A%20Tree%20/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Is-It-A-Tree"><a href="#题目-Is-It-A-Tree" class="headerlink" title="题目 -  Is It A Tree?"></a>题目 -  Is It A Tree?</h2><p>A tree is a well-known data structure that is either empty (null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties.<br>There is exactly one node, called the root, to which no directed edges point.</p><p>Every node except the root has exactly one edge pointing to it.</p><p>There is a unique sequence of directed edges from the root to each node.</p><p>For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not.</p><p><img src="https://vj.z180.cn/30ef78e36a20744a5f03113e493b37bd?v=1574784453" alt="img"> <img src="https://vj.z180.cn/7ea4cdfb5d2f2f534399ffe7a50055bc?v=1574784453" alt="img"> <img src="https://vj.z180.cn/9d5304508ccb31ccef0e0cc34205bd20?v=1574784453" alt="img"></p><p>In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not.</p><p>Input</p><p>The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero.</p><p>Output</p><p>For each test case display the line <code>Case k is a tree.&quot; or the line</code>Case k is not a tree.”, where k corresponds to the test case number (they are sequentially numbered starting with 1).</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 8 5 3 5 2 6 4</span><br><span class="line">5 6 0 0</span><br><span class="line">8 1 7 3 6 2 8 9 7 5</span><br><span class="line">7 4 7 8 7 6 0 0</span><br><span class="line">3 8 6 8 6 4</span><br><span class="line">5 3 5 6 5 2 0 0</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Case 1 is a tree.</span><br><span class="line">Case 2 is a tree.</span><br><span class="line">Case 3 is not a tree.</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>判断给出的数据能否构成一颗树。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>构成一颗有向树的条件:</p><ol><li><p>不能有环</p></li><li><p>只有一个根即只有一个入度为0的点，否则是森林</p></li><li><p>除了根结点之外的其他点的入度为1</p></li><li><p>任意两个点之间都能连通</p><p>然后注意一下空树也算树。</p><p>计算根节点个数，然后除根结点之外其他的入度均要为1，判断是否是森林，即只有一个根节点。</p></li></ol><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX&#x3D;1e4+10;</span><br><span class="line">int pre[MAX];</span><br><span class="line">int in[MAX];</span><br><span class="line">int vis[MAX];</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for(i&#x3D;1; i&lt;MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i]&#x3D;0;</span><br><span class="line">        in[i]&#x3D;0;</span><br><span class="line">        pre[i]&#x3D;i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int Find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(pre[x]&#x3D;&#x3D;x)</span><br><span class="line">    &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return Find(pre[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void Union(int root1,int root2)</span><br><span class="line">&#123;</span><br><span class="line">    int x,y;</span><br><span class="line">    x&#x3D;Find(root1);</span><br><span class="line">    y&#x3D;Find(root2);</span><br><span class="line">    if(x!&#x3D;y)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[x]&#x3D;y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,root,counts,a,b,flag,ans&#x3D;1;</span><br><span class="line">    while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!&#x3D;EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        if(a&#x3D;&#x3D;-1&amp;&amp;b&#x3D;&#x3D;-1)</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        if(a&#x3D;&#x3D;0&amp;&amp;b&#x3D;&#x3D;0)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Case %d is a tree.\n&quot;,ans);</span><br><span class="line">            ans++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        init();</span><br><span class="line">        vis[a]&#x3D;1;</span><br><span class="line">        vis[b]&#x3D;1;</span><br><span class="line">        in[b]++;</span><br><span class="line">        Union(a,b);</span><br><span class="line">        while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!&#x3D;EOF)</span><br><span class="line">        &#123;</span><br><span class="line">            if(a&#x3D;&#x3D;0&amp;&amp;b&#x3D;&#x3D;0)</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[a]&#x3D;1;</span><br><span class="line">            vis[b]&#x3D;1;</span><br><span class="line">            in[b]++;</span><br><span class="line">            Union(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        flag&#x3D;1;</span><br><span class="line">        root&#x3D;0;</span><br><span class="line">        counts&#x3D;0;</span><br><span class="line">        for(i&#x3D;1;i&lt;MAX;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(vis[i]&amp;&amp;in[i]&#x3D;&#x3D;0)</span><br><span class="line">            &#123;</span><br><span class="line">                root++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(in[i]&gt;&#x3D;2)</span><br><span class="line">            &#123;</span><br><span class="line">                flag&#x3D;0;</span><br><span class="line">            &#125;</span><br><span class="line">            if(vis[i]&amp;&amp;pre[i]&#x3D;&#x3D;i)</span><br><span class="line">            &#123;</span><br><span class="line">                counts++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(root!&#x3D;1||counts&gt;1)</span><br><span class="line">        &#123;</span><br><span class="line">            flag&#x3D;0;</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Case %d is a tree.\n&quot;,ans);</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Case %d is not a tree.\n&quot;,ans);</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带权并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--More is better</title>
      <link href="/2019/12/03/More%20is%20better/"/>
      <url>/2019/12/03/More%20is%20better/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-More-is-better"><a href="#题目-More-is-better" class="headerlink" title="题目 -  More is better"></a>题目 -  More is better</h2><p>Mr Wang wants some boys to help him with a project. Because the project is rather complex, <strong>the more boys come, the better it will be</strong>. Of course there are certain requirements.</p><p>Mr Wang selected a room big enough to hold the boys. The boy who are not been chosen has to leave the room immediately. There are 10000000 boys in the room numbered from 1 to 10000000 at the very beginning. After Mr Wang’s selection any two of them who are still in this room should be friends (direct or indirect), or there is only one boy left. Given all the direct friend-pairs, you should decide the best way.</p><p>Input</p><p>The first line of the input contains an integer n (0 ≤ n ≤ 100 000) - the number of direct friend-pairs. The following n lines each contains a pair of numbers A and B separated by a single space that suggests A and B are direct friends. (A ≠ B, 1 ≤ A, B ≤ 10000000)</p><p>Output</p><p>The output in one line contains exactly one integer equals to the maximum number of boys Mr Wang may keep.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">5 6</span><br><span class="line">1 6</span><br><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">5 6</span><br><span class="line">7 8</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>Hint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A and B are friends(direct or indirect), B and C are friends(direct or indirect), </span><br><span class="line">then A and C are also friends(indirect).</span><br><span class="line"></span><br><span class="line"> In the first sample &#123;1,2,5,6&#125; is the result.</span><br><span class="line">In the second sample &#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;,&#123;7,8&#125; are four kinds of answers.</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>A和B是朋友（直接或间接），B和C是朋友（直接或间接），<br>那么A和C也是朋友（间接）。</p><p>在第一个样本{1,2,5,6}中是结果。<br>在第二个示例{1,2}，{3,4}，{5,6}，{7,8}中有四种答案。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p><img src="https://i.loli.net/2019/12/03/uWTxo9ieOmXFHUV.jpg" alt="fullsizerender_1_.jpg"></p><p>比上道龙珠题简单的多其实都差不多</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define maxn 110000</span><br><span class="line">int N, sum;</span><br><span class="line">int per[maxn], ran[maxn];</span><br><span class="line"> </span><br><span class="line">void init() &#123;</span><br><span class="line">    sum &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; maxn; ++i)&#123;</span><br><span class="line">        per[i] &#x3D; i;</span><br><span class="line">        ran[i] &#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int find(int x)&#123;</span><br><span class="line">    int r &#x3D; x;</span><br><span class="line">    while( r !&#x3D; per[r])</span><br><span class="line">        r &#x3D; per[r];</span><br><span class="line">    per[x] &#x3D; r;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void join (int a, int b)&#123;</span><br><span class="line">    int fa &#x3D; find(a);</span><br><span class="line">    int fb &#x3D; find(b);</span><br><span class="line">    if(fa !&#x3D; fb)&#123;</span><br><span class="line">        per[fa] &#x3D; fb;</span><br><span class="line">        ran[fb] +&#x3D; ran[fa];</span><br><span class="line">        sum &#x3D; max(sum, ran[fb]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main ()&#123;</span><br><span class="line">    while(scanf(&quot;%d&quot;, &amp;N) !&#x3D; EOF)&#123;</span><br><span class="line">        init();</span><br><span class="line">        if(N &#x3D;&#x3D; 0)&#123;</span><br><span class="line">            printf(&quot;1\n&quot;);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        while(N--)&#123;</span><br><span class="line">            int a, b;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class="line">            join(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带权并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--小希的迷宫</title>
      <link href="/2019/12/03/%E5%B0%8F%E5%B8%8C%E7%9A%84%E8%BF%B7%E5%AE%AB/"/>
      <url>/2019/12/03/%E5%B0%8F%E5%B8%8C%E7%9A%84%E8%BF%B7%E5%AE%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-小希的迷宫"><a href="#题目-小希的迷宫" class="headerlink" title="题目 -  小希的迷宫"></a>题目 -  小希的迷宫</h2><p>上次Gardon的迷宫城堡小希玩了很久（见Problem B），现在她也想设计一个迷宫让Gardon来走。但是她设计迷宫的思路不一样，首先她认为所有的通道都应该是双向连通的，就是说如果有一个通道连通了房间A和B，那么既可以通过它从房间A走到房间B，也可以通过它从房间B走到房间A，为了提高难度，小希希望任意两个房间有且仅有一条路径可以相通（除非走了回头路）。小希现在把她的设计图给你，让你帮忙判断她的设计图是否符合她的设计思路。比如下面的例子，前两个是符合条件的，但是最后一个却有两种方法从5到达8。<br><img src="https://vj.z180.cn/ce3d27d9f95d7ac87d47240232e2e0ba?v=1575349768" alt="img"></p><p>Input</p><p>输入包含多组数据，每组数据是一个以0 0结尾的整数对列表，表示了一条通道连接的两个房间的编号。房间的编号至少为1，且不超过100000。每两组数据之间有一个空行。<br>整个文件以两个-1结尾。</p><p>Output</p><p>对于输入的每一组数据，输出仅包括一行。如果该迷宫符合小希的思路，那么输出”Yes”，否则输出”No”。</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6 8  5 3  5 2  6 4</span><br><span class="line">5 6  0 0</span><br><span class="line"></span><br><span class="line">8 1  7 3  6 2  8 9  7 5</span><br><span class="line">7 4  7 8  7 6  0 0</span><br><span class="line"></span><br><span class="line">3 8  6 8  6 4</span><br><span class="line">5 3  5 6  5 2  0 0</span><br><span class="line"></span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>判断该图是不是连通并且无环的。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>用并查集来判断是否是连通的。</p><p>如果父节点相同，则有环。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N &#x3D; 1e5+10;</span><br><span class="line">int par[N];</span><br><span class="line">bool vis[N];</span><br><span class="line"></span><br><span class="line">int Find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(par[x] &#x3D;&#x3D; x) return x;</span><br><span class="line">    return par[x] &#x3D; Find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line">bool unite(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    x &#x3D; Find(x);</span><br><span class="line">    y &#x3D; Find(y);</span><br><span class="line">    if(x !&#x3D; y) &#123;</span><br><span class="line">        par[x] &#x3D; y; return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a, b;</span><br><span class="line">    while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b)) &#123;</span><br><span class="line">        if(a&#x3D;&#x3D;-1 &amp;&amp; b&#x3D;&#x3D;-1) break;</span><br><span class="line">        if(a&#x3D;&#x3D;0 &amp;&amp; b&#x3D;&#x3D;0) &#123;</span><br><span class="line">            printf(&quot;Yes\n&quot;);          </span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i &#x3D; 0; i &lt;&#x3D; N; i++) par[i] &#x3D; i;</span><br><span class="line">        unite(a,b);</span><br><span class="line">        vis[a] &#x3D; vis[b] &#x3D; true;</span><br><span class="line">        bool flag &#x3D; true;</span><br><span class="line">        while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b) &amp;&amp; a) &#123;</span><br><span class="line">            bool ans &#x3D; unite(a,b);</span><br><span class="line">            vis[a] &#x3D; vis[b] &#x3D; true;</span><br><span class="line">            if(!ans) flag &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">        int k &#x3D; 0;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">            if(vis[i] &amp;&amp; par[i]&#x3D;&#x3D;i) k++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        if(k &gt; 1) flag &#x3D; false;</span><br><span class="line">        if(flag) printf(&quot;Yes\n&quot;);</span><br><span class="line">        else printf(&quot;No\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Dragon Balls</title>
      <link href="/2019/12/02/Dragon%20Balls/"/>
      <url>/2019/12/02/Dragon%20Balls/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Dragon-Balls"><a href="#题目-Dragon-Balls" class="headerlink" title="题目 -  Dragon Balls"></a>题目 -  Dragon Balls</h2><p>Five hundred years later, the number of dragon balls will increase unexpectedly, so it’s too difficult for Monkey King(WuKong) to gather all of the dragon balls together.<br><img src="https://vj.z180.cn/4a6544a4139251ff34655ebaaf261a73?v=1574761495" alt="img"><br>His country has N cities and there are exactly N dragon balls in the world. At first, for the ith dragon ball, the sacred dragon will puts it in the ith city. Through long years, some cities’ dragon ball(s) would be transported to other cities. To save physical strength WuKong plans to take Flying Nimbus Cloud, a magical flying cloud to gather dragon balls.<br>Every time WuKong will collect the information of one dragon ball, he will ask you the information of that ball. You must tell him which city the ball is located and how many dragon balls are there in that city, you also need to tell him how many times the ball has been transported so far.</p><p>Input</p><p>The first line of the input is a single positive integer T(0 &lt; T &lt;= 100).<br>For each case, the first line contains two integers: N and Q (2 &lt; N &lt;= 10000 , 2 &lt; Q &lt;= 10000).<br>Each of the following Q lines contains either a fact or a question as the follow format:<br>  T A B : All the dragon balls which are in the same city with A have been transported to the city the Bth ball in. You can assume that the two cities are different.<br>  Q A : WuKong want to know X (the id of the city Ath ball is in), Y (the count of balls in Xth city) and Z (the tranporting times of the Ath ball). (1 &lt;= A, B &lt;= N)</p><p>Output</p><p>For each test case, output the test case number formated as sample output. Then for each query, output a line with three integers X Y Z saparated by a blank space.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 3</span><br><span class="line">T 1 2</span><br><span class="line">T 3 2</span><br><span class="line">Q 2</span><br><span class="line">3 4</span><br><span class="line">T 1 2</span><br><span class="line">Q 1</span><br><span class="line">T 1 3</span><br><span class="line">Q 1</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">2 3 0</span><br><span class="line">Case 2:</span><br><span class="line">2 2 1</span><br><span class="line">3 3 2</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>初始时，有n个龙珠，编号从1到n，分别对应的放在编号从1到n的城市中。现在有两种操作：</p><p>T A B，表示把A球所在城市全部的龙珠全部转移到B城市。（第一次时，因为A球所在的城市只有一个球，所以只移动1个，如果有多个，则全部移动）。</p><p>Q A，表示查询A。要求得到的信息分别是：A现在所在的城市，A所在城市的龙珠数目，A转移到该城市移动的次数（如果没有移动就输出0）</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p><img src="https://i.loli.net/2019/12/03/Q8VHUBfMD6KWbcu.jpg" alt="fullsizerender.jpg"></p><p>qwq嫌弃..这个字也太丑了！！</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn&#x3D;1e5+10;</span><br><span class="line">int f[maxn];</span><br><span class="line">int sum[maxn];</span><br><span class="line">int Move[maxn];</span><br><span class="line">int n,m;</span><br><span class="line">void init_set()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i&#x3D;1; i&lt;&#x3D;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]&#x3D;i;</span><br><span class="line">        sum[i]&#x3D;1;</span><br><span class="line">        Move[i]&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int find_set(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(x!&#x3D;f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        int t&#x3D;f[x];</span><br><span class="line">        f[x]&#x3D;find_set(f[x]);</span><br><span class="line">        Move[x]+&#x3D;Move[t];</span><br><span class="line">        return f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br><span class="line">void unit_set(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    x&#x3D;find_set(x);</span><br><span class="line">    y&#x3D;find_set(y);</span><br><span class="line">    if(x&#x3D;&#x3D;y)return;</span><br><span class="line">    f[x]&#x3D;y;</span><br><span class="line">    sum[y]+&#x3D;sum[x];</span><br><span class="line">    Move[x]++;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    int l&#x3D;0;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        l++;</span><br><span class="line">        printf(&quot;Case %d:\n&quot;,l);</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">        init_set();</span><br><span class="line">        for(int i&#x3D;0; i&lt;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            char s[6];</span><br><span class="line">            scanf(&quot;%s&quot;,s);</span><br><span class="line">            if(s[0]&#x3D;&#x3D;&#39;T&#39;)</span><br><span class="line">            &#123;</span><br><span class="line">                int x,y;</span><br><span class="line">                scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class="line">                unit_set(x,y);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(s[0]&#x3D;&#x3D;&#39;Q&#39;)</span><br><span class="line">            &#123;</span><br><span class="line">                int x;</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">                int ans&#x3D;find_set(x);</span><br><span class="line">                printf(&quot;%d %d %d\n&quot;,ans,sum[ans],Move[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带权并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--A Bug&#39;s Life</title>
      <link href="/2019/12/01/A%20Bug&#39;s%20Life/"/>
      <url>/2019/12/01/A%20Bug&#39;s%20Life/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-A-Bug’s-Life"><a href="#题目-A-Bug’s-Life" class="headerlink" title="题目 -  A Bug’s Life"></a>题目 -  A Bug’s Life</h2><p><strong>Background</strong><br>Professor Hopper is researching the sexual behavior of a rare species of bugs. He assumes that they feature two different genders and that they only interact with bugs of the opposite gender. In his experiment, individual bugs and their interactions were easy to identify, because numbers were printed on their backs.<br><strong>Problem</strong><br>Given a list of bug interactions, decide whether the experiment supports his assumption of two genders with no homosexual bugs or if it contains some bug interactions that falsify it.</p><p>Input</p><p>The first line of the input contains the number of scenarios. Each scenario starts with one line giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to 1000000) separated by a single space. In the following lines, each interaction is given in the form of two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting from one.</p><p>Output</p><p>The output for every scenario is a line containing “Scenario #i:”, where i is the number of the scenario starting at 1, followed by one line saying either “No suspicious bugs found!” if the experiment is consistent with his assumption about the bugs’ sexual behavior, or “Suspicious bugs found!” if Professor Hopper’s assumption is definitely wrong.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">1 3</span><br><span class="line">4 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scenario #1:</span><br><span class="line">Suspicious bugs found!</span><br><span class="line"></span><br><span class="line">Scenario #2:</span><br><span class="line">No suspicious bugs found!</span><br></pre></td></tr></table></figure><p>Hint</p><p>Huge input,scanf is recommended.</p><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>t组数据，n个虫子，m组相互喜爱的关系，虫子分为雌雄两种，每个虫子只有一个性别，问是否存在同性恋的虫子。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>与犯罪团伙那个题差不多。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[20010];</span><br><span class="line">int r[20010];&#x2F;&#x2F;&#x2F;r&#x3D;0代表与根节点同性</span><br><span class="line">int Find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    if(pre[x]&#x3D;&#x3D;x)</span><br><span class="line">    &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    t&#x3D;pre[x];</span><br><span class="line">    pre[x]&#x3D;Find(pre[x]);&#x2F;&#x2F;&#x2F;压缩路径</span><br><span class="line">    r[x]&#x3D;(r[x]+r[t]+1)%2;</span><br><span class="line">    return pre[x];</span><br><span class="line">&#125;</span><br><span class="line">void Union(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int x,y;</span><br><span class="line">    x&#x3D;Find(a);</span><br><span class="line">    y&#x3D;Find(b);</span><br><span class="line">    pre[x]&#x3D;y;</span><br><span class="line">    r[x]&#x3D;(r[b]-r[a])%2;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t,i,j,k,flag;</span><br><span class="line">    int n,m,a,b;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    for(k&#x3D;1;k&lt;&#x3D;t;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag&#x3D;0;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">        for(i&#x3D;1; i&lt;&#x3D;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            r[i]&#x3D;1;</span><br><span class="line">            pre[i]&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i&#x3D;1; i&lt;&#x3D;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">            if(Find(a)&#x3D;&#x3D;Find(b))</span><br><span class="line">            &#123;</span><br><span class="line">                if(r[a]&#x3D;&#x3D;r[b])&#x2F;&#x2F;&#x2F;同性</span><br><span class="line">                &#123;</span><br><span class="line">                    flag&#x3D;1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Union(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Scenario #%d:\nSuspicious bugs found!\n\n&quot;,k);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Scenario #%d:\nNo suspicious bugs found!\n\n&quot;,k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Find them, Catch them</title>
      <link href="/2019/12/01/Find%20them,%20Catch%20them/"/>
      <url>/2019/12/01/Find%20them,%20Catch%20them/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Find-them-Catch-them"><a href="#题目-Find-them-Catch-them" class="headerlink" title="题目 - Find them, Catch them"></a>题目 - Find them, Catch them</h2><p>The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.)</p><p>Assume N (N &lt;= 10^5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M &lt;= 10^5) messages in sequence, which are in the following two kinds:</p><p>\1. D [a] [b]<br>where [a] and [b] are the numbers of two criminals, and they belong to different gangs.</p><p>\2. A [a] [b]<br>where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang.</p><p>Input</p><p>The first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above.</p><p>Output</p><p>For each message “A [a] [b]” in each case, your program should give the judgment based on the information got before. The answers might be one of “In the same gang.”, “In different gangs.” and “Not sure yet.”</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5 5</span><br><span class="line">A 1 2</span><br><span class="line">D 1 2</span><br><span class="line">A 1 2</span><br><span class="line">D 2 4</span><br><span class="line">A 1 4</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Not sure yet.</span><br><span class="line">In different gangs.</span><br><span class="line">In the same gang</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>在一个城市里有两种不同的犯罪团伙。首先输入T表示有T组测试，然后输入N和M，表示有N个罪犯（编号从1到N）而且接下来有M个操作。操作分为两种：</p><p>1.D a b，表示编号为a和b的两个罪犯属于不同的犯罪团伙；</p><p>2.A a b，表示询问编号为a和b的两个罪犯是否是同一个犯罪团伙或者不确定。</p><p>对于每一个A操作，根据题意都要有相应的回答（输出）。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>一道标准的关系型并查集题。普通的并查集是给几个同类的元素，而关系型并查集是给不同类的元素，然后求各个元素之间的关系。对于这种题目,我们不仅需要开一个pre[]存父节点,还需要开一个r[]关系数组,来记录其和父亲的关系,r[]=0表示属于同一个帮派,r[]=1，表示不属于同一个帮派，初始化都为同一个帮派。一旦输入x和y不属于同一个帮派就将x和y连通同时更新r[]，一旦输入A，如果find（x）!=find（y）,说明还没输入它们的关系,所以不确定;如果find（x）==find(y） 由于r[]数组表示的是该节点和父节点的关系,两个节点又属于同一个节点,所以如果r[x]==r[y]则属于同一个帮派,否则不属于;<br>处理方法:<br>1、在利用find函数不断寻找根节点的过程中需要不断更新r[],举个例子:因为我们在利用find函数寻找根节点时有路径压缩,所以我们需要推导出<br>子节点、父节点、和爷爷节点三者之间的关系:<br>如果 子节点和父节点关系为r1，父节点和爷爷节点关系为r2，那么孙子节点和爷爷节点的关系为（r1+r2）%2;(两种情况所以对2去模)<br>证明:<br>我们可以列出所有的可能情况<br>     （a, b）  (b, c)  (a, c)  (r1+r2)%2<br>           0            0       0        0<br>           0            1       1        1<br>           1            0       1        1<br>           1            1       0        0<br>PS:我个人一开始对为什么子父节点之间的关系会为同一个帮派感到困惑,因为题目中给出的都是不同帮派的,其实仔细一想并不是,我们在合并连通<br>过程中存在着路径压缩,将孙子节点变为了儿子节点通过上面的关系式就有可能出现相同的情况了;<br>2、在用join函数就行连通是也需要及时更新r[],我们还是通过推导得出关系式,<br>假设我们f1为x1的根节点,f2为x2的根节点,我们现在要将f1合并到f2上去, 推导关系式为 r[f1]=(r[x1]+r[x2]+1)%2;<br>证明:<br>我们还是罗列出一些情况: 首先需要明确一点的,我们需要合并 x1和x2以为他们两个不是同一个帮派的,所以有x1和x2的关系为1<br>（x1, f1） (x2, f2)  (x1, x2) (f1,f2)_<br>       0                0          1         1<br>       0                1          1         0<br>       1                0          1         0<br>       1                1          1         1</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define N 100010 </span><br><span class="line">int pre[N];</span><br><span class="line">int r[N];</span><br><span class="line">int n,m;</span><br><span class="line">void init() </span><br><span class="line">&#123;</span><br><span class="line">     for (int i&#x3D;1;i&lt;&#x3D;n;i++)       </span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]&#x3D;i;</span><br><span class="line">              r[i]&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line">int find(int x) </span><br><span class="line">&#123;</span><br><span class="line">      if(x&#x3D;&#x3D;pre[x])      return x;</span><br><span class="line">         int tmp&#x3D;pre[x];</span><br><span class="line">         pre[x]&#x3D;find(pre[x]);</span><br><span class="line">         r[x]&#x3D;(r[x]+r[tmp])%2;</span><br><span class="line">         return pre[x];</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">void join(int x1,int x2) </span><br><span class="line">&#123;</span><br><span class="line">        int f1&#x3D;find(x1);</span><br><span class="line">        int f2&#x3D;find(x2);</span><br><span class="line">        if(f1!&#x3D;f2)     </span><br><span class="line">    &#123;</span><br><span class="line">         pre[f1]&#x3D;f2;</span><br><span class="line">         r[f1]&#x3D;(r[x1]+r[x2]+1)%2;</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">        return ;</span><br><span class="line">&#125;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">      int t,i;</span><br><span class="line">        char c;</span><br><span class="line">    int a,b;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">        while(t--)     </span><br><span class="line">    &#123;</span><br><span class="line">         scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">               init();</span><br><span class="line">               getchar();</span><br><span class="line">               for (i&#x3D;1;i&lt;&#x3D;m;i++)         </span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%c %d %d&quot;,&amp;c,&amp;a,&amp;b);</span><br><span class="line">            getchar();</span><br><span class="line">            if(c&#x3D;&#x3D;&#39;D&#39;) </span><br><span class="line">            &#123;</span><br><span class="line">                     join(a,b);</span><br><span class="line">                   </span><br><span class="line">            &#125; else </span><br><span class="line">            &#123;</span><br><span class="line">                   if(find(a)!&#x3D;find(b))       </span><br><span class="line">                   printf(&quot;Not sure yet.n&quot;);      </span><br><span class="line">                   else      </span><br><span class="line">                   &#123;   </span><br><span class="line">                   if(r[a]&#x3D;&#x3D;r[b])          </span><br><span class="line">                   printf(&quot;In the same gang.n&quot;); </span><br><span class="line">                   else          </span><br><span class="line">                   printf(&quot;In different gangs.\n&quot;);  </span><br><span class="line">                   &#125;     </span><br><span class="line">                   &#125;   </span><br><span class="line">                   &#125;      </span><br><span class="line">                   &#125;   </span><br><span class="line">                   return 0; </span><br><span class="line">                   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带权并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--The Suspects</title>
      <link href="/2019/12/01/The%20Suspects/"/>
      <url>/2019/12/01/The%20Suspects/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-The-Suspect"><a href="#题目-The-Suspect" class="headerlink" title="题目 - The Suspect"></a>题目 - The Suspect</h2><p>Severe acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others.<br>In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP).<br>Once a member in a group is a suspect, all members in the group are suspects.<br>However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects.</p><p>Input</p><p>The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 &lt; n &lt;= 30000 and 0 &lt;= m &lt;= 500. Every student is numbered by a unique integer between 0 and n−1, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space.<br>A case with n = 0 and m = 0 indicates the end of the input, and need not be processed.</p><p>Output</p><p>For each case, output the number of suspects in one line.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">100 4</span><br><span class="line">2 1 2</span><br><span class="line">5 10 13 11 12 14</span><br><span class="line">2 0 1</span><br><span class="line">2 99 2</span><br><span class="line">200 2</span><br><span class="line">1 5</span><br><span class="line">5 1 2 3 4 5</span><br><span class="line">1 0</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>给定学生总数和学生分组，0号学生得了SARS 问有SARS的嫌疑的有多少人，和0同一组即为有嫌疑。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p><img src="https://i.loli.net/2019/12/01/YL9WZF4M5rSVCeU.png" alt="TIM图片20191201094621.png"></p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[30005] ,group[30005], num[30005];</span><br><span class="line">int findgroup(int x)&#x2F;&#x2F;查询每个学生的组长是谁。</span><br><span class="line">&#123;</span><br><span class="line">    if(x&#x3D;&#x3D;group[x]) return x;</span><br><span class="line">    else return findgroup(group[x]);</span><br><span class="line">&#125;</span><br><span class="line">void join(int x,int y)&#x2F;&#x2F;在同一组的学生需要把组长选定。</span><br><span class="line">&#123;</span><br><span class="line">    int grox&#x3D;findgroup(x);</span><br><span class="line">    int groy&#x3D;findgroup(y);</span><br><span class="line">    if(grox!&#x3D;groy)</span><br><span class="line">    &#123;</span><br><span class="line">        group[grox]&#x3D;groy;</span><br><span class="line">        num[groy]+&#x3D;num[grox];&#x2F;&#x2F;每一次合并，都需要吧集合中的元素个数加进去。</span><br><span class="line">    &#125;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,k;</span><br><span class="line">    while(~scanf(&quot;%d %d&quot;,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        if(n&#x3D;&#x3D;0&amp;&amp;m&#x3D;&#x3D;0)</span><br><span class="line">            break;</span><br><span class="line">        for(int i&#x3D;0; i&lt;n; i++) &#x2F;&#x2F;开个数组，给数组赋值，即自己自成一组并为组长。</span><br><span class="line">        &#123;</span><br><span class="line">            group[i]&#x3D;i;</span><br><span class="line">            num[i]&#x3D;1;</span><br><span class="line">        &#125;</span><br><span class="line">        while(m--)&#x2F;&#x2F;共有m个样例。</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d &quot;,&amp;k);</span><br><span class="line">            for(int i&#x3D;0; i&lt;k; i++)</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">            for(int i&#x3D;0; i&lt;k-1; i++)&#x2F;&#x2F;把在同一组的几个学生合并在一起。</span><br><span class="line">                join(a[i],a[i+1]);&#x2F;&#x2F;如果组长不同，便把组长选定。</span><br><span class="line">        &#125;</span><br><span class="line">        int t&#x3D;findgroup(0);&#x2F;&#x2F;找到生病的0号学生的组长。</span><br><span class="line">        printf(&quot;%d\n&quot;,num[t]);</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--Wireless Network</title>
      <link href="/2019/12/01/Wireless%20Network/"/>
      <url>/2019/12/01/Wireless%20Network/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Wireless-Network"><a href="#题目-Wireless-Network" class="headerlink" title="题目 - Wireless Network"></a>题目 - Wireless Network</h2><p>An earthquake takes place in Southeast Asia. The ACM (Asia Cooperated Medical team) have set up a wireless network with the lap computers, but an unexpected aftershock attacked, all computers in the network were all broken. The computers are repaired one by one, and the network gradually began to work again. Because of the hardware restricts, each computer can only directly communicate with the computers that are not farther than d meters from it. But every computer can be regarded as the intermediary of the communication between two other computers, that is to say computer A and computer B can communicate if computer A and computer B can communicate directly or there is a computer C that can communicate with both A and B.</p><p>In the process of repairing the network, workers can take two kinds of operations at every moment, repairing a computer, or testing if two computers can communicate. Your job is to answer all the testing operations.</p><p>Input</p><p>The first line contains two integers N and d (1 &lt;= N &lt;= 1001, 0 &lt;= d &lt;= 20000). Here N is the number of computers, which are numbered from 1 to N, and D is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers xi, yi (0 &lt;= xi, yi &lt;= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats:<br>\1. “O p” (1 &lt;= p &lt;= N), which means repairing computer p.<br>\2. “S p q” (1 &lt;= p, q &lt;= N), which means testing whether computer p and q can communicate.</p><p>The input will not exceed 300000 lines.</p><p>Output</p><p>For each Testing operation, print “SUCCESS” if the two computers can communicate, or “FAIL” if not.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">0 1</span><br><span class="line">0 2</span><br><span class="line">0 3</span><br><span class="line">0 4</span><br><span class="line">O 1</span><br><span class="line">O 2</span><br><span class="line">O 4</span><br><span class="line">S 1 4</span><br><span class="line">O 3</span><br><span class="line">S 1 4</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FAIL</span><br><span class="line">SUCCESS</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>给定学生总数和学生分组，0号学生得了SARS 问有SARS的嫌疑的有多少人，和0同一组即为有嫌疑。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p><img src="C:%5CUsers%5CXieYW%5CDesktop%5CTIM%E5%9B%BE%E7%89%8720191201094621.png" alt="TIM图片20191201094621"></p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[30005] ,group[30005], num[30005];</span><br><span class="line">int findgroup(int x)&#x2F;&#x2F;查询每个学生的组长是谁。</span><br><span class="line">&#123;</span><br><span class="line">    if(x&#x3D;&#x3D;group[x]) return x;</span><br><span class="line">    else return findgroup(group[x]);</span><br><span class="line">&#125;</span><br><span class="line">void join(int x,int y)&#x2F;&#x2F;在同一组的学生需要把组长选定。</span><br><span class="line">&#123;</span><br><span class="line">    int grox&#x3D;findgroup(x);</span><br><span class="line">    int groy&#x3D;findgroup(y);</span><br><span class="line">    if(grox!&#x3D;groy)</span><br><span class="line">    &#123;</span><br><span class="line">        group[grox]&#x3D;groy;</span><br><span class="line">        num[groy]+&#x3D;num[grox];&#x2F;&#x2F;每一次合并，都需要吧集合中的元素个数加进去。</span><br><span class="line">    &#125;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,k;</span><br><span class="line">    while(~scanf(&quot;%d %d&quot;,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        if(n&#x3D;&#x3D;0&amp;&amp;m&#x3D;&#x3D;0)</span><br><span class="line">            break;</span><br><span class="line">        for(int i&#x3D;0; i&lt;n; i++) &#x2F;&#x2F;开个数组，给数组赋值，即自己自成一组并为组长。</span><br><span class="line">        &#123;</span><br><span class="line">            group[i]&#x3D;i;</span><br><span class="line">            num[i]&#x3D;1;</span><br><span class="line">        &#125;</span><br><span class="line">        while(m--)&#x2F;&#x2F;共有m个样例。</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d &quot;,&amp;k);</span><br><span class="line">            for(int i&#x3D;0; i&lt;k; i++)</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">            for(int i&#x3D;0; i&lt;k-1; i++)&#x2F;&#x2F;把在同一组的几个学生合并在一起。</span><br><span class="line">                join(a[i],a[i+1]);&#x2F;&#x2F;如果组长不同，便把组长选定。</span><br><span class="line">        &#125;</span><br><span class="line">        int t&#x3D;findgroup(0);&#x2F;&#x2F;找到生病的0号学生的组长。</span><br><span class="line">        printf(&quot;%d\n&quot;,num[t]);</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带权并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--今年暑假不AC</title>
      <link href="/2019/12/01/%E4%BB%8A%E5%B9%B4%E6%9A%91%E5%81%87%E4%B8%8DAC/"/>
      <url>/2019/12/01/%E4%BB%8A%E5%B9%B4%E6%9A%91%E5%81%87%E4%B8%8DAC/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-今年暑假不AC"><a href="#题目-今年暑假不AC" class="headerlink" title="题目 -  今年暑假不AC"></a>题目 -  今年暑假不AC</h2><p>“今年暑假不AC？”<br>“是的。”<br>“那你干什么呢？”<br>“看世界杯呀，笨蛋！”<br>“@#$%^&amp;*%…”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。<br>作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p><p>Input</p><p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p><p>Output</p><p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">1 3</span><br><span class="line">3 4</span><br><span class="line">0 7</span><br><span class="line">3 8</span><br><span class="line">15 19</span><br><span class="line">15 20</span><br><span class="line">10 15</span><br><span class="line">8 18</span><br><span class="line">6 12</span><br><span class="line">5 10</span><br><span class="line">4 14</span><br><span class="line">2 9</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>中文题，意思很清楚了。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>要求看最多的节目，有三种思考方式:看最早开始时间（这个没用，不能保证两个节目不重合），用时最少的节目（这个也没用)，只有当上一个节目结束时才能进行下一个节目，所以下一个节目能否进行取决于上一个活动的最晚结束时间。因此，将每个时间的最晚结束时间先排序（由小到大），然后只要保证下一个活动的最早开始时间大于等于上一个活动的最晚结束时间就能顺利进行。由于要等所有的数据输入之后才能做出判断所以先用一个数组来存储最早开始时间和最晚结束时间（用结构体数组来存储)。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">struct node&#123;</span><br><span class="line">int start,end;</span><br><span class="line">&#125;;</span><br><span class="line">bool cmp(const node&amp;a,const node&amp;b)&#123;</span><br><span class="line">return a.end&lt;b.end;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">while(cin&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line">node time[99];</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line">int endtime &#x3D; -1; </span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;time[i].start&gt;&gt;time[i].end;</span><br><span class="line">&#125;</span><br><span class="line">sort(time,time+n,cmp);</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">if(time[i].start&gt;&#x3D;endtime) </span><br><span class="line">&#123;</span><br><span class="line">++count;</span><br><span class="line">endtime &#x3D; time[i].end;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--食物链</title>
      <link href="/2019/12/01/%E9%A3%9F%E7%89%A9%E9%93%BE/"/>
      <url>/2019/12/01/%E9%A3%9F%E7%89%A9%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-食物链"><a href="#题目-食物链" class="headerlink" title="题目 -  食物链"></a>题目 -  食物链</h2><p>动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。<br>现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。<br>有人用两种说法对这N个动物所构成的食物链关系进行描述：<br>第一种说法是”1 X Y”，表示X和Y是同类。<br>第二种说法是”2 X Y”，表示X吃Y。<br>此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。<br>1） 当前的话与前面的某些真的话冲突，就是假话；<br>2） 当前的话中X或Y比N大，就是假话；<br>3） 当前的话表示X吃X，就是假话。<br>你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。</p><p>Input</p><p>第一行是两个整数N和K，以一个空格分隔。<br>以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。<br>若D=1，则表示X和Y是同类。<br>若D=2，则表示X吃Y。</p><p>Output</p><p>只有一个整数，表示假话的数目。</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">100 7</span><br><span class="line">1 101 1 </span><br><span class="line">2 1 2</span><br><span class="line">2 2 3 </span><br><span class="line">2 3 3 </span><br><span class="line">1 1 3 </span><br><span class="line">2 3 1 </span><br><span class="line">1 5 5</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>( ﹁ ﹁ ) 中文题目读得懂..</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>确定关系的放在同一颗树里，另加一个r[]数组来记录每个结点和它的根节点的关系，r[]=0,代表同类;r[]=1,代表被父亲吃了；r[]=2，代表它吃了父亲。</p><p>满足其中一个为假话:</p><p>1） 当前的话与前面的某些真的话冲突，就是假话；<br>2） 当前的话中X或Y比N大，就是假话；<br>3） 当前的话表示X吃X，就是假话。</p><p>题目要判断假话的个数,输入的值为d,x,y。</p><p>首先可以判断x或者y是否大于N，如果大于，则假话数加一。</p><p>其次，通过find()函数找x，y的根结点判断是否相同。（相同说明有确定关系)</p><ul><li>相同，则合并x，y所在的树，因为y被x吃所以将y树并在x树上，再更新y树对新的父结点的r[]值即r[fy]。</li></ul><p>下面我们来分析一下r[fy]等于多少:</p><p>fy-&gt;fx=fy-&gt;y+y-&gt;x+x-&gt;fx=3-r[y]+d-1+r[x]</p><p>(因为d==1时，y-&gt;x=0;d==2时,y-&gt;x=1,所以y-&gt;x=1）</p><p>合并时:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void unite(int x,int y,int d)</span><br><span class="line">&#123;</span><br><span class="line">    int fx&#x3D;find(x);</span><br><span class="line">    int fy&#x3D;find(y);</span><br><span class="line">    p[fy]&#x3D;fx;</span><br><span class="line">    r[fy]&#x3D;(r[x]-r[y]+3+(d-1))%3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过d的值来判断是否说谎。</p><p>如果d==1,r[x]!=r[y]，说谎数加一。</p><p>如果d==2,r[x]+1)%3!=r[y],说谎数加一。</p><p>查找:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(x&#x3D;&#x3D;p[x]) return x;</span><br><span class="line">    int t&#x3D;p[x];</span><br><span class="line">    p[x]&#x3D;find(p[x]);</span><br><span class="line">    r[x]&#x3D;(r[x]+r[t])%3;</span><br><span class="line">    return p[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不相同，则两个结点建立关系。</li></ul><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn &#x3D; 50000+10;</span><br><span class="line">int p[maxn]; </span><br><span class="line">int r[maxn];</span><br><span class="line">void set(int n) </span><br><span class="line">&#123;</span><br><span class="line">    for(int x &#x3D; 1; x &lt;&#x3D; n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[x] &#x3D; x; </span><br><span class="line">        r[x] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int find(int x) </span><br><span class="line">&#123;</span><br><span class="line">    if(x &#x3D;&#x3D; p[x]) return x;</span><br><span class="line"> </span><br><span class="line">    int t &#x3D; p[x];</span><br><span class="line">    p[x] &#x3D; find(p[x]);</span><br><span class="line">    r[x] &#x3D; (r[x]+r[t])%3; </span><br><span class="line">    return p[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void unite(int x, int y, int d)</span><br><span class="line">&#123;</span><br><span class="line">    int fx &#x3D; find(x);</span><br><span class="line">    int fy &#x3D; find(y);</span><br><span class="line"> </span><br><span class="line">    p[fy] &#x3D; fx; </span><br><span class="line">    r[fy] &#x3D; (r[x]-r[y]+3+(d-1))%3; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span><br><span class="line">    set(n);</span><br><span class="line"> </span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    int d, x, y;</span><br><span class="line">    while(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;d, &amp;x, &amp;y);</span><br><span class="line"> </span><br><span class="line">        if(x &gt; n || y &gt; n || (d &#x3D;&#x3D; 2 &amp;&amp; x &#x3D;&#x3D; y)) ans++; </span><br><span class="line"> </span><br><span class="line">        else if(find(x) &#x3D;&#x3D; find(y)) </span><br><span class="line">        &#123;</span><br><span class="line">            if(d &#x3D;&#x3D; 1 &amp;&amp; r[x] !&#x3D; r[y]) ans++; </span><br><span class="line">            if(d &#x3D;&#x3D; 2 &amp;&amp; (r[x]+1)%3 !&#x3D; r[y]) ans++; </span><br><span class="line">        &#125;</span><br><span class="line">        else unite(x, y, d); </span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带权并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 1988 Cube Stacking</title>
      <link href="/2019/11/29/Cube%20Stacking/"/>
      <url>/2019/11/29/Cube%20Stacking/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-Cube-Stacking"><a href="#题目-Cube-Stacking" class="headerlink" title="题目 - Cube Stacking"></a>题目 - Cube Stacking</h2><p>  Farmer John and Betsy are playing a game with N (1 &lt;= N &lt;= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1&lt;= P &lt;= 100,000) operation. There are two types of operations:<br>moves and counts.<br>* In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y.<br>* In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value.</p><p>Write a program that can verify the results of the game.</p><p>Input</p><p>* Line 1: A single integer, P</p><p>* Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a ‘M’ for a move operation or a ‘C’ for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X.</p><p>Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself.</p><p>Output</p><p>Print the output from each of the count operations in the same order as the input file.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">M 1 6</span><br><span class="line">C 1</span><br><span class="line">M 2 4</span><br><span class="line">M 2 6</span><br><span class="line">C 3</span><br><span class="line">C 4</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h4><p><strong>有若干个方块，经p次操作后，在x方块下面的方块有多少个，M操作—&gt;将包含x方块的堆移到含y的堆上，C操作—&gt;输出x方块下方方块的数目。</strong></p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul><li><p>x方块下方方块数目=总数目-上方方块数目</p></li><li><p>如图所示</p><p>![`T0X6L_@KNGWGV_IFP__4YG.png](<a href="https://i.loli.net/2019/12/01/5NJpSi28VfPBb4U.png" target="_blank" rel="noopener">https://i.loli.net/2019/12/01/5NJpSi28VfPBb4U.png</a>)</p></li></ul><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int f[30010],cnt[30010],up[30010];</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int y;</span><br><span class="line">    if(x!&#x3D;f[x])</span><br><span class="line">    &#123;</span><br><span class="line">       y&#x3D;f[x];</span><br><span class="line">       f[x]&#x3D;find(y);</span><br><span class="line">       up[x]+&#x3D;up[y];</span><br><span class="line">    &#125;</span><br><span class="line">    return f[x];</span><br><span class="line">&#125;</span><br><span class="line">void Union(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int px&#x3D;find(x);</span><br><span class="line">    int py&#x3D;find(y);</span><br><span class="line">    if(px&#x3D;&#x3D;py)</span><br><span class="line">    return ;</span><br><span class="line">    front[py]&#x3D;px;</span><br><span class="line">    up[py]&#x3D;cnt[px];</span><br><span class="line">    cnt[px]+&#x3D;cnt[py];</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int p,i,j,x,y;</span><br><span class="line">    char a;</span><br><span class="line">    cin&gt;&gt;p;</span><br><span class="line">    for(i&#x3D;1;i&lt;&#x3D;30000;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]&#x3D;i;</span><br><span class="line">        cnt[i]&#x3D;1;</span><br><span class="line">        up[i]&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line">    while(p--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        if(a&#x3D;&#x3D;&#39;M&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class="line">            Union(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">            int px&#x3D;find(x);</span><br><span class="line">            printf(&quot;%d\n&quot;,cnt[px]-up[x]-1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>还有一种思路是把父亲放在下面，过程与上图类似，只不过是倒过来了。</li></ul><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int f[30010],cnt[30010],dis[30010];</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int y;</span><br><span class="line">    if(x!&#x3D;f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        y&#x3D;f[x];</span><br><span class="line">        f[x]&#x3D;find(f[x]);</span><br><span class="line">        dis[x]+&#x3D;dis[y];</span><br><span class="line">    &#125;</span><br><span class="line">    return f[x];</span><br><span class="line">&#125;</span><br><span class="line">void Union(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int px&#x3D;find(x);</span><br><span class="line">    int py&#x3D;find(y);</span><br><span class="line">    if(px&#x3D;&#x3D;py)</span><br><span class="line">    return ;</span><br><span class="line">    f[px]&#x3D;py;</span><br><span class="line">    dis[px]+&#x3D;cnt[py];</span><br><span class="line">    cnt[py]+&#x3D;cnt[px];</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int p,i,j,x,y;</span><br><span class="line">    char a;</span><br><span class="line">    cin&gt;&gt;p;</span><br><span class="line">    for(i&#x3D;1;i&lt;&#x3D;30000;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        front[i]&#x3D;i;</span><br><span class="line">        dis[i]&#x3D;0;</span><br><span class="line">        cnt[i]&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line">    while(p--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        if(a&#x3D;&#x3D;&#39;M&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class="line">            Union(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">            find(x);</span><br><span class="line">            cout&lt;&lt;dis[x]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带权并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集专题</title>
      <link href="/2019/11/27/ACM%E8%AE%AD%E7%BB%83--%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2019/11/27/ACM%E8%AE%AD%E7%BB%83--%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><strong>算法理解</strong></p><p>​        并查集是一种树型的数据结构，用于处理一些不交集的合并和查询问题。联合-查找算法(union-find algorithm)定义了两个用于此数据结构的操作。</p><ul><li><strong>Union</strong>:  将两个子集合并成同一个集合，根据父节点的引用像根行进直到树根。</li><li><strong>Find</strong>:  确定元素属于哪一个集合，方法就是不断的向上查找找到它的根节点，确定两个元素是否在同一个子集，将两棵树合并到一起，这通过将一颗树的根连接到另一棵树的根。</li></ul><p>​       在并查集树中，每个集合的代表即是集合的根节点。</p><p><strong>初始化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    pre[i]&#x3D;i;&#x2F;&#x2F;使每一个点的父结点都指向自己</span><br></pre></td></tr></table></figure><p><strong>查找</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;递归</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(pre[x]&#x3D;&#x3D;x) return x;</span><br><span class="line">    return find(find(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;非递归</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int r&#x3D;x;&#x2F;&#x2F;将当前位置记录</span><br><span class="line">    while(pre(r)!&#x3D;r) &#x2F;&#x2F;如果不是根节点</span><br><span class="line">    r&#x3D;pre(r);&#x2F;&#x2F;继续向上查找，r的值更新为其父结点</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样写数据量大的时候会爆，下面来看路径压缩优化：</p><p><strong>路径压缩优化</strong></p><p>将某个根结点下的所有子结点都指向该根结点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int r&#x3D;x;</span><br><span class="line">    while(pre[r]!&#x3D;r)</span><br><span class="line">    &#123;</span><br><span class="line">        r&#x3D;pre[r];</span><br><span class="line">    &#125;</span><br><span class="line">    int i&#x3D;x;&#x2F;&#x2F;记录当前点</span><br><span class="line">    int j;&#x2F;&#x2F;记录i的上家</span><br><span class="line">    while(i!&#x3D;r)&#x2F;&#x2F;若当前点不是根结点</span><br><span class="line">    &#123;</span><br><span class="line">        j&#x3D;pre[i];&#x2F;&#x2F;记录上家</span><br><span class="line">        pre[i]&#x3D;r;&#x2F;&#x2F;使当前点直接指向根节点</span><br><span class="line">        i&#x3D;j;&#x2F;&#x2F;当前点移动到上家</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void merge(int x,int y)    &#x2F;&#x2F;合并集合 </span><br><span class="line">&#123;</span><br><span class="line">    int t1&#x3D;find(x);    &#x2F;&#x2F;找到x和y的根结点 </span><br><span class="line">    int t2&#x3D;find(y);</span><br><span class="line">    if(t1!&#x3D;t2)    pre[t1]&#x3D;t2; &#x2F;&#x2F;所在集合不同，将其中一个作为另一个集合的子集(根结点一样)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="A-How-Many-Tables"><a href="#A-How-Many-Tables" class="headerlink" title="A - How Many Tables"></a><strong>A - How Many Tables</strong></h4><p>Today is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers.</p><p>One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table.</p><p>For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least.</p><p>Input</p><p>The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases.</p><p>Output</p><p>For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5 3</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 5</span><br><span class="line"></span><br><span class="line">5 1</span><br><span class="line">2 5</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn &#x3D; 1050;</span><br><span class="line">int s[maxn];</span><br><span class="line">void init_set()&#123;</span><br><span class="line">for(int i&#x3D;1;i&lt;maxn;i++)</span><br><span class="line">    s[i]&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">int find_set(int x)&#123;</span><br><span class="line">return x&#x3D;&#x3D;s[x]?x:find_set(s[x]);</span><br><span class="line">&#125;</span><br><span class="line">void union_set(int x,int y)&#123;</span><br><span class="line">x&#x3D;find_set(x);</span><br><span class="line">y&#x3D;find_set(y);</span><br><span class="line">if(x!&#x3D;y) s[x]&#x3D;s[y];</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int t,m,n,x,y;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">while(t--)&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">init_set();</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">union_set(x,y);</span><br><span class="line">&#125;</span><br><span class="line">int ans&#x3D;0;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">if(s[i]&#x3D;&#x3D;i) ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="B-Ubiquitous-Religions"><a href="#B-Ubiquitous-Religions" class="headerlink" title="B - Ubiquitous Religions"></a>B - Ubiquitous Religions</h4><p>There are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in.</p><p>You know that there are n students in your university (0 &lt; n &lt;= 50000). It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask m (0 &lt;= m &lt;= n(n-1)/2) pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion.</p><p>Input</p><p>The input consists of a number of cases. Each case starts with a line specifying the integers n and m. The next m lines each consists of two integers i and j, specifying that students i and j believe in the same religion. The students are numbered 1 to n. The end of input is specified by a line in which n = m = 0.</p><p>Output</p><p>For each test case, print on a single line the case number (starting with 1) followed by the maximum number of different religions that the students in the university believe in.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">10 9</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">1 5</span><br><span class="line">1 6</span><br><span class="line">1 7</span><br><span class="line">1 8</span><br><span class="line">1 9</span><br><span class="line">1 10</span><br><span class="line">10 4</span><br><span class="line">2 3</span><br><span class="line">4 5</span><br><span class="line">4 8</span><br><span class="line">5 8</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Case 1: 1</span><br><span class="line">Case 2: 7</span><br></pre></td></tr></table></figure><p>Hint</p><p>Huge input, scanf is recommended.</p><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h4><p>有 <img src="https://private.codecogs.com/gif.latex?n" alt="n"> 个学生，编号 <img src="https://private.codecogs.com/gif.latex?1%5Csim%20n" alt="1\sim n">，每个学生最多有 <img src="https://private.codecogs.com/gif.latex?1" alt="1"> 个宗教信仰，输入 <img src="https://private.codecogs.com/gif.latex?m" alt="m"> 组数据，每组数据包含 <img src="https://private.codecogs.com/gif.latex?a%2Cb" alt="a,b">，表示同学 <img src="https://private.codecogs.com/gif.latex?a" alt="a"> 和同学 <img src="https://private.codecogs.com/gif.latex?b" alt="b"> 有相同的信仰，求在 <img src="https://private.codecogs.com/gif.latex?n" alt="n"> 名学生中最多存在多少种不同的宗教信仰。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>与A题一样。</p><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码:"></a>AC代码:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn &#x3D; 50000+5;</span><br><span class="line">int s[maxn];</span><br><span class="line">int height[maxn];</span><br><span class="line">void init_set()&#123;</span><br><span class="line">for(int i &#x3D; 1;i&lt;&#x3D;maxn;i++)&#123;</span><br><span class="line">s[i]&#x3D;i;</span><br><span class="line">height[i]&#x3D;0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int find_set(int x)&#123;</span><br><span class="line">return x &#x3D;&#x3D; s[x] ? x:find_set(s[x]);</span><br><span class="line">&#125;</span><br><span class="line">void union_set(int x,int y)&#123;</span><br><span class="line">x &#x3D; find_set(x);</span><br><span class="line">y &#x3D; find_set(y);</span><br><span class="line">if(height[x] &#x3D;&#x3D; height[y])&#123;</span><br><span class="line">height[x] &#x3D; height[x] + 1;</span><br><span class="line">s[y] &#x3D; x;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">if(height[x] &lt; height [y]) s[x] &#x3D; y;</span><br><span class="line">else s[y] &#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">int t,n,m,x,y;</span><br><span class="line">int k&#x3D;1;</span><br><span class="line">while(cin &gt;&gt; n &gt;&gt;m &amp;&amp;m&amp;&amp;n)&#123;</span><br><span class="line">init_set();</span><br><span class="line">for(int i &#x3D; 1;i&lt;&#x3D;m;i++)&#123;</span><br><span class="line">cin &gt;&gt;x&gt;&gt;y;</span><br><span class="line">union_set(x,y);</span><br><span class="line">&#125;</span><br><span class="line">int ans &#x3D; 0;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">if(s[i] &#x3D;&#x3D; i)</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;&quot;Case &quot;&lt;&lt;k++&lt;&lt;&quot;: &quot;&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VJudge--全排列</title>
      <link href="/2019/11/21/%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2019/11/21/%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>​     排列与组合是常用的数学方法。<br>先给一个正整数 ( 1 &lt; = n &lt; = 10 )<br>例如n＝3，所有组合,并且按字典序输出：<br>1 2 3<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1 </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入一个整数n(  1&lt;=n&lt;=10)</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出所有全排列</p><p>每个全排列一行，相邻两个数用空格隔开（最后一个数后面没有空格）</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure><p>解析：</p><p>​      1.首先我们考虑1号盒子，我们约定每到一个盒子面前都按数字递增的顺序摆放扑克牌。于是把1号扑克牌放到1号盒子中。<br>​      2.接着考虑2号盒子，现在我们手里剩下2号和3号扑克牌，于是我们可以把2号扑克牌放入2号盒子中。于是在3号盒子只剩一种可能性，我们继           续把3号扑克放入3号盒子。此时产生了一种排列——{1,2,3</p><p>​      3.接着我们收回3号盒子中的3号扑克牌，尝试一种新的可能，此时发现别无他选。于是选择回到2号盒子收回2号扑克。</p><p>​      4.在2号盒子中我们放入3号扑克，于是自然而然的在3号盒子中只能放入2号扑克。此时产生另一种排列——{1,3,2}；</p><p>​      5.重复以上步骤就能得到数字{123}的全排列。</p><p> 1、现在我们用C语言代码描述往每个小盒子中放入所有可能扑克牌的步骤：</p><p>for(int i = 1; i &lt;= n; i++){ a[step] = i; //将i号扑克牌放入第step个盒子中 }</p><p>2、a是一个装入了所有小盒子的数组，变量step表示当前正处于第step号小盒子。i则表示扑克牌的序号。现在我们需要考虑另外一个问题，则如果一张扑克牌已经被放入别的盒子中，则不能再被放入当前盒子。</p><p>因此需要一个book数组标记哪些牌已经被使用。此时我们完善上述代码。</p><p>for(int i = 1; i &lt;= n; i++){ if(book[i] == 0){ a[step] = i; //将i号扑克牌放入第step个盒子中 book[i] = 1; // 置1表示第i号扑克牌不在手中 } }</p><p>现在对于step号盒子已经处理完，那么我们要考虑step+1号盒子。第step+1个的盒子的处理方式与第step个盒子的处理方式完全一样。因此，我们可以对上述操作做一个封装。</p><p>void dfs(int step)</p><p>{ </p><p>//step表示当前要处理的盒子</p><p> for(int i = 1; i &lt;= n; i++)</p><p>{ </p><p>if(book[i] == 0)</p><p>{ a[step] = i; //将i号扑克牌放入第step个盒子中</p><p> book[i] = 1; // 置1表示第i号扑克牌不在手中 </p><p>} } }</p><p>于是我们重新回想文章开头阐述的放置扑克牌的思路：</p><p>我们在当前盒子放置完第i个扑克牌之后，便立即处理下一个盒子。于是：</p><p>void dfs(int step)</p><p>{ </p><p>//step表示当前要处理的盒子 </p><p>for(int i = 1; i &lt;= n; i++)</p><p>{ </p><p>if(book[i] == 0)</p><p>{ </p><p>a[step] = i; //将i号扑克牌放入第step个盒子中 </p><p>book[i] = 1; // 置1表示第i号扑克牌不在手中</p><p> dfs(step+1); //递归调用</p><p> book[i] = 0; // 非常重要，收回该盒子中的扑克牌才能进行下一次尝试。</p><p> } } }</p><p>需要注意到的是，我们需要收回每一次尝试的扑克牌i，才能进行下一次尝试。</p><p>现在需要考虑最后一个问题，那就是什么时候得到一个满足要求的排列，也就是考虑终止条件。这里很容易得到，当我们处理完成第n个盒子的时候，就已经得到一个符合要求的排列了。加上终止条件的代码如下：</p><p>void dfs(int step){</p><p> //step表示当前要处理的盒子 </p><p>if(step == n+1)</p><p>{ </p><p>//输出排列 </p><p>for(i = 1; i &lt;= n; i++) printf(“%d”, a[i]);</p><p> printf(“\n”); return; } </p><p>for(int i = 1; i &lt;= n; i++)</p><p>{ </p><p>if(book[i] == 0)</p><p>{ a[step] = i; </p><p>//将i号扑克牌放入第step个盒子中 </p><p>book[i] = 1; </p><p>// 置1表示第i号扑克牌不在手中 </p><p>dfs(step+1); //递归调用</p><p> book[i] = 0; // 非常重要，收回该盒子中的扑克牌才能进行下一次尝试。 } } }</p><p>现在深度优先搜索（DFS）的基本模型展现在我们眼前。</p><p>其核心在于，在当前步骤要把每一种可能性都尝试一遍（使用for循环），解决完当前步骤后进入下一步。而下一步的解决方式完全等同于当前步骤的解决方法。于是可以总结出DFS的基本模型：</p><p>void dfs(int step){ </p><p><em>判断结束边界</em> 尝试每一种可能 </p><p>for(i = 1; i &lt;= n; i++)</p><p>{ </p><p>尝试下一步 dfs(step + 1);</p><p> } return; }</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深搜递归入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见OJ错误</title>
      <link href="/2019/11/18/OJ%E9%94%99%E8%AF%AF/"/>
      <url>/2019/11/18/OJ%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h5 id="hello-world-">&emsp;&emsp;记录一下我在做题过程中WA的原因。<a id="more"></a></h5>​       float换为double，如hdu2003。大家在做题的时候还是养成用double的习惯，因为一般由于用double而不是float导致超内存和超时而引起的问题很少出现。<p>​       scanf()输入时注意用getchar（）存取换行符。</p><p>​       在输入数据时要考虑输入的数据是否满足条件，如hdu2007 。输入两个正整数x，y并不默认表示x&lt;y,在写代码时要判断一下是否x&lt;y，不然就WA掉了。而且要考虑到可能会出现的情况以及读清楚题意，如hdu2054。判断A和B是否相等，但题目并没有告诉A,B是什么类型，由于我默认认为它是整型，于是它又WA了。(我寻思这个题怎么这么简单…)。</p><p>​        一定要注意审题，如果题目没有说是整数就当double型以免WA掉例如hdu2039。</p><p>一些其他的错误:</p><p>Presentation Error：注意一下最后一行有没有空格，在循环体中判断一下是不是最后一行。</p><p>Output Limit Exceeded：输入时用scanf()没有加!=EOF，陷入死循环(用cin可)。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU2030--汉字统计</title>
      <link href="/2019/11/18/%E6%B1%89%E5%AD%97%E7%BB%9F%E8%AE%A1/"/>
      <url>/2019/11/18/%E6%B1%89%E5%AD%97%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>汉字统计</p><p>Problem Description</p><p>统计给定文本文件中汉字的个数。</p><p>Input</p><p>输入文件首先包含一个整数n，表示测试实例的个数，然后是n段文本。</p><p>Output</p><p>对于每一段文本，输出其中的汉字的个数，每个测试实例的输出占一行。</p><p>[Hint:]从汉字机内码的特点考虑~</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">WaHaHa! WaHaHa! 今年过节不说话要说只说普通话WaHaHa! WaHaHa!</span><br><span class="line">马上就要期末考试了Are you ready?</span><br></pre></td></tr></table></figure><p> Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">14</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>Author</p><p>lcy</p><p> Source</p><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&key=+C%D3%EF%D1%D4%B3%CC%D0%F2%C9%E8%BC%C6%C1%B7%CF%B0%A3%A8%CE%E5%A3%A9&source=1&searchmode=source" target="_blank" rel="noopener">C语言程序设计练习（五）</a></p><p> Recommend</p><p>lcy   |   We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2031" target="_blank" rel="noopener">2031</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2032" target="_blank" rel="noopener">2032</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2026" target="_blank" rel="noopener">2026</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2027" target="_blank" rel="noopener">2027</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2024" target="_blank" rel="noopener">2024</a> </p><hr><p>思路：从汉字机内码的角度考虑，汉子机内码都是占两个字节且每个字节的第一个二进制位都是0,就是都为负数，除2就是汉字个数。</p><hr><p> AC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    getchar();</span><br><span class="line">    while(n--)&#123;</span><br><span class="line">    char c;</span><br><span class="line">    int m&#x3D;0;</span><br><span class="line">    while((c&#x3D;getchar())!&#x3D;&#39;\n&#39;)</span><br><span class="line">    if(c&lt;0) m++;</span><br><span class="line">    cout&lt;&lt;m&#x2F;2&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDU第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL和基本数据结构</title>
      <link href="/2019/11/03/STL%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/11/03/STL%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h5 id="hello-world-">&emsp;&emsp;STL(Standard Template Library)是C++的标准模板库熟练掌握它们在很多题目中能极大地简化编程，需要完全掌握。<a id="more"></a></h5><h5 id="hello-world-">&emsp;&emsp;STL包括容器(container)、迭代器(iterator)、空间配置器(allocator)、配接器(adapter)、算法(algorithm)、仿函数(functor)6个部分。<!-- more --></h5><h4 id="hello-world-">&emsp; 容器</h4><h5 id="hello-world-">&emsp; 1.顺序式容器</h5>vector ：动态数组，从末尾能快速插入与删除，直接访问任何元素。<p>list ：双链表，从任何地方快速插入和删除。</p><p>deque ：双向队列，从前面或后面快速插入与删除，直接访问任何元素。</p><p>queue：队列，先进先出。</p><p>priority_queue：优先队列，最高优先级元素总是第一个出列。</p><p>stack：栈，后进先出。</p><h5 id="hello-world-">&emsp; 2.关联式容器</h5>set：集合，快速查找，不允许重复值。<p>map：一对多映射，基于关键字快速查找，不允许重复值。</p><p>multiset：快速查找，允许重复值。</p><p>multimap：一对多映射，基于关键字快速查找，允许重复值。</p><h6 id="hello-world-">&emsp; vector</h6>hdu 4841 “圆桌问题”<p>[<a href="https://vjudge.net/contest/337673#problem/A]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/A]</a>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">vector &lt;int&gt; table;</span><br><span class="line">int m,n;</span><br><span class="line">while(cin&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">table.clear();</span><br><span class="line">for(int i&#x3D;0;i&lt;2*n;i++) table.push_back(i);</span><br><span class="line">int pos &#x3D; 0;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">pos &#x3D; (pos+m-1)%table.size();</span><br><span class="line">table.erase(table.begin()+pos);</span><br><span class="line">&#125;</span><br><span class="line">int j&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;2*n;i++)&#123;</span><br><span class="line">if(!(i%50)&amp;&amp;i) cout&lt;&lt;endl;</span><br><span class="line">if(j&lt;table.size()&amp;&amp;i&#x3D;&#x3D;table[j])&#123;</span><br><span class="line">j++;</span><br><span class="line">cout&lt;&lt;&quot;G&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else cout&lt;&lt;&quot;B&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="hello-world-">&emsp; stack</h6>hdu 1062 ”Text Reverse“<p>[<a href="https://vjudge.net/contest/337673#problem/B]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/B]</a>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">char ch;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">ch &#x3D; getchar();</span><br><span class="line">while(n--)&#123;</span><br><span class="line">stack&lt;char&gt;s;</span><br><span class="line">while(true)&#123;</span><br><span class="line">ch &#x3D; getchar();</span><br><span class="line">if(ch&#x3D;&#x3D;&#39;\n&#39;||ch&#x3D;&#x3D;&#39; &#39;||ch&#x3D;&#x3D;EOF)&#123;</span><br><span class="line">while(!s.empty())&#123;</span><br><span class="line">printf(&quot;%c&quot;,s.top());</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">   if(ch&#x3D;&#x3D;&#39;\n&#39;||ch&#x3D;&#x3D;EOF) break;</span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">else s.push(ch);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hdu 1237 “简单计算器”</p><p>[<a href="https://vjudge.net/contest/337673#problem/C]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/C]</a>: </p><p>思路：(太懒了8想写了..)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int P(char c)</span><br><span class="line">&#123;</span><br><span class="line">    if (c &#x3D;&#x3D; &#39;+&#39; || c &#x3D;&#x3D; &#39;-&#39;) return 1;</span><br><span class="line">    return 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double Ans(double x, double y, char c)</span><br><span class="line">&#123;</span><br><span class="line">    if (c &#x3D;&#x3D; &#39;+&#39;) return x + y;</span><br><span class="line">    if (c &#x3D;&#x3D; &#39;-&#39;) return x - y;</span><br><span class="line">    if (c &#x3D;&#x3D; &#39;*&#39;)return x*y;</span><br><span class="line">    return x &#x2F; y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    while (scanf(&quot;%d&quot;,&amp;n)!&#x3D;EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        char c &#x3D; getchar();</span><br><span class="line">        if (c&#x3D;&#x3D;&#39;\n&#39;&amp;&amp;n &#x3D;&#x3D; 0)break;</span><br><span class="line">        stack&lt;char&gt; op;</span><br><span class="line">        stack&lt;double&gt;num;</span><br><span class="line">        num.push(n);</span><br><span class="line">        while (true)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%c %d&quot;, &amp;c, &amp;n);</span><br><span class="line">            char k &#x3D; getchar();</span><br><span class="line">            while (!op.empty()&amp;&amp;P(c)&lt;&#x3D;P(op.top()))</span><br><span class="line">            &#123;</span><br><span class="line">                char t &#x3D; op.top();</span><br><span class="line">                op.pop();</span><br><span class="line">                double y &#x3D; num.top();</span><br><span class="line">                num.pop();</span><br><span class="line">                double x &#x3D; num.top();</span><br><span class="line">                num.pop();</span><br><span class="line">                double ans &#x3D; Ans(x, y, t);</span><br><span class="line">                num.push(ans);</span><br><span class="line">            &#125;</span><br><span class="line">            op.push(c);</span><br><span class="line">            num.push(n);</span><br><span class="line">            if (k &#x3D;&#x3D; &#39;\n&#39;)break;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        while (!op.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            char t &#x3D; op.top();</span><br><span class="line">            op.pop();</span><br><span class="line">            double y &#x3D; num.top();</span><br><span class="line">            num.pop();</span><br><span class="line">            double x &#x3D; num.top();</span><br><span class="line">            num.pop();</span><br><span class="line">            double ans &#x3D; Ans(x, y, t);</span><br><span class="line">            num.push(ans);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%.2f\n&quot;, num.top());</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="hello-world-">&emsp; Queue</h6>hdu 1702 ”ACboy needs your help again！“<p>[<a href="https://vjudge.net/contest/337673#problem/D]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/D]</a>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int t,temp,n;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    while(t--)&#123;</span><br><span class="line">    string str1,str;</span><br><span class="line">    queue&lt;int&gt;Q;</span><br><span class="line">    stack&lt;int&gt;S;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;str;</span><br><span class="line">    for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">    if(str&#x3D;&#x3D;&quot;FIFO&quot;)&#123;</span><br><span class="line">    cin&gt;&gt;str1;</span><br><span class="line">    if(str1 &#x3D;&#x3D; &quot;IN&quot;)&#123;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    Q.push(temp);</span><br><span class="line">&#125;</span><br><span class="line">if(str1 &#x3D;&#x3D; &quot;OUT&quot;)&#123;</span><br><span class="line">if(Q.empty()) cout&lt;&lt;&quot;None&quot;&lt;&lt;endl;</span><br><span class="line">else &#123;</span><br><span class="line">cout&lt;&lt;Q.front()&lt;&lt;endl;</span><br><span class="line">Q.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cin&gt;&gt;str1;</span><br><span class="line">if(str1 &#x3D;&#x3D; &quot;IN&quot;)&#123;</span><br><span class="line">cin&gt;&gt;temp;</span><br><span class="line">S.push(temp);</span><br><span class="line">&#125;</span><br><span class="line">if(str1 &#x3D;&#x3D; &quot;OUT&quot;)&#123;</span><br><span class="line">if(S.empty()) cout&lt;&lt;&quot;None&quot;&lt;&lt;endl;</span><br><span class="line">else &#123;</span><br><span class="line">cout&lt;&lt;S.top()&lt;&lt;endl;</span><br><span class="line">S.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hdu 1873 ”看病要排队“</p><p>[<a href="https://vjudge.net/contest/337673#problem/E]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/E]</a>: </p><p>注意队列中存放结构体的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node&#123;</span><br><span class="line">int n,id;</span><br><span class="line">&#125;st;</span><br><span class="line">bool operator &lt; (const node&amp;a,const node&amp;b)&#123;</span><br><span class="line">if(a.n&#x3D;&#x3D;b.n) return a.id&gt;b.id;</span><br><span class="line">else return a.n&lt;b.n;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">while(scanf(&quot;%d&quot;,&amp;n)!&#x3D;EOF)&#123;</span><br><span class="line">priority_queue&lt;node&gt; q[4];</span><br><span class="line">char s[10];</span><br><span class="line">int a,b;</span><br><span class="line">int k&#x3D;1;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">scanf(&quot;%s %d&quot;,s,&amp;a);</span><br><span class="line">if(strcmp(s,&quot;IN&quot;)&#x3D;&#x3D;0)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;b);</span><br><span class="line">st.n&#x3D;b;</span><br><span class="line">st.id&#x3D;k++;</span><br><span class="line">q[a].push(st); </span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">if(!q[a].empty())&#123;</span><br><span class="line">st &#x3D; q[a].top();</span><br><span class="line">q[a].pop();</span><br><span class="line">printf(&quot;%d\n&quot;,st.id);</span><br><span class="line">&#125;</span><br><span class="line">else printf(&quot;EMPTY\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="hello-world-">&emsp; list</h6>hdu 1276 ”士兵队列训练问题“<p>[<a href="https://vjudge.net/contest/337673#problem/F]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/F]</a>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;list&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int t,n;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">while(t--)&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">int k &#x3D; 2;</span><br><span class="line">list&lt;int&gt;mylist;</span><br><span class="line">list&lt;int&gt;::iterator it;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">mylist.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">while(mylist.size()&gt;3)&#123;</span><br><span class="line">int num &#x3D; 1;</span><br><span class="line">for(it &#x3D; mylist.begin();it !&#x3D; mylist.end();)&#123;</span><br><span class="line">if(num++%k&#x3D;&#x3D;0) it &#x3D; mylist.erase(it);</span><br><span class="line">else it++;</span><br><span class="line">&#125;</span><br><span class="line">k&#x3D;&#x3D;2?k&#x3D;3:k&#x3D;2;</span><br><span class="line">&#125;</span><br><span class="line">for(it &#x3D;mylist.begin();it!&#x3D;mylist.end();it++)&#123;</span><br><span class="line">if(it!&#x3D;mylist.begin()) cout&lt;&lt;&quot; &quot;;</span><br><span class="line">cout&lt;&lt;*it;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="hello-world-">&emsp; set</h6>hdu 2094 “产生冠军”<p>[<a href="https://vjudge.net/contest/337673#problem/G]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/G]</a>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">set&lt;string&gt;A,B;</span><br><span class="line">string s1,s2;</span><br><span class="line">int n;</span><br><span class="line">while(cin&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">A.insert(s1);</span><br><span class="line">A.insert(s2);</span><br><span class="line">B.insert(s2);</span><br><span class="line">&#125;</span><br><span class="line">if(A.size()-B.size()&#x3D;&#x3D;1) &#123;</span><br><span class="line">cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">else cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;</span><br><span class="line">A.clear();</span><br><span class="line">B.clear();</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="hello-world-">&emsp; map</h6>hdu 2648 “Shopping”<p>[<a href="https://vjudge.net/contest/337673#problem/H]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/H]</a>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n,m,p;</span><br><span class="line">map&lt;string,int&gt;shop;</span><br><span class="line">while(cin&gt;&gt;n)&#123;</span><br><span class="line">string s;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line">while(m--)&#123;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;p&gt;&gt;s;</span><br><span class="line">shop[s]+&#x3D;p;</span><br><span class="line">&#125;</span><br><span class="line">int rank&#x3D; 1;</span><br><span class="line">map&lt;string,int&gt;::iterator it;</span><br><span class="line">for(it &#x3D; shop.begin();it!&#x3D;shop.end();it++)&#123;</span><br><span class="line">if(it-&gt;second&gt;shop[&quot;memory&quot;])&#123;</span><br><span class="line">rank++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;rank&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">shop.clear();</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="hello-world-">&emsp; next_permutation</h6>hdu 1027 "Ignatius and the Princess II"<p>[<a href="https://vjudge.net/contest/337673#problem/I]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/I]</a>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int a[1001];</span><br><span class="line">    int n,m;</span><br><span class="line">    while(cin&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">    for(int i&#x3D;1;i&lt;&#x3D;n;i++) a[i]&#x3D;i;</span><br><span class="line">    int b &#x3D; 1;</span><br><span class="line">    do&#123;</span><br><span class="line">    if(m&#x3D;&#x3D;b) break;</span><br><span class="line">    b++;</span><br><span class="line">&#125;while(next_permutation(a+1,a+1+n));</span><br><span class="line">for(int i&#x3D;1;i&lt;n;i++)&#123;</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;a[n]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hdu 1716 “排列2”</p><p>[<a href="https://vjudge.net/contest/337673#problem/J]" target="_blank" rel="noopener">https://vjudge.net/contest/337673#problem/J]</a>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[5],tag&#x3D;0;</span><br><span class="line">    while(scanf(&quot;%d%d%d%d&quot;,&amp;a[0],&amp;a[1],&amp;a[2],&amp;a[3]))</span><br><span class="line">    &#123;</span><br><span class="line">        if(a[0]&#x3D;&#x3D;0 &amp;&amp; a[1]&#x3D;&#x3D;0 &amp;&amp; a[2]&#x3D;&#x3D;0 &amp;&amp; a[3]&#x3D;&#x3D;0)</span><br><span class="line">            break;  </span><br><span class="line">        if(tag)</span><br><span class="line">            printf(&quot;\n&quot;);  </span><br><span class="line">        tag&#x3D;1;</span><br><span class="line">        int flag&#x3D;1,tmp;</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            if(a[0]&#x3D;&#x3D;0) </span><br><span class="line">                continue;</span><br><span class="line">            if(flag)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;%d%d%d%d&quot;,a[0],a[1],a[2],a[3]);</span><br><span class="line">                flag&#x3D;0;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(tmp&#x3D;&#x3D;a[0])</span><br><span class="line">                printf(&quot; %d%d%d%d&quot;,a[0],a[1],a[2],a[3]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;\n%d%d%d%d&quot;,a[0],a[1],a[2],a[3]);</span><br><span class="line">            tmp&#x3D;a[0];  </span><br><span class="line">        &#125;while(next_permutation(a,a+4));</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-快慢指针</title>
      <link href="/2019/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"/>
      <url>/2019/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h5 id="hello-world-">&emsp;&emsp;快慢指针中的快慢指的是移动的步长，即每次向前移动速度的快慢,在使用快慢指针时可以让快指针每次沿链表向前移动2，慢指针每次向前一次。<a id="more"></a></h5><h3 id="hello-world-">&emsp;快慢指针的应用</h3><h4 id="hello-world-">&emsp; (一)寻找链表中心</h4>​    原理:快指针的移动速度是慢指针移动速度的两倍，因此当快指针到达表尾时慢指针到达中点，但要分奇偶情况讨论。<p>代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">while(fast &amp;&amp; slow)&#123;</span><br><span class="line"></span><br><span class="line">​    if(fast-&gt;next &#x3D;&#x3D; NULL)&#123;</span><br><span class="line"></span><br><span class="line">​        return slow-&gt;data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​    else if(fast-&gt;next !&#x3D; NULL&amp;&amp;fast-&gt;next-&gt;next &#x3D;&#x3D; NULL)&#123;</span><br><span class="line"></span><br><span class="line">​        return (slow-&gt;data + slow-&gt;next-&gt;data)&#x2F;2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​    else &#123;</span><br><span class="line"></span><br><span class="line">​        fast &#x3D; fast-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">​        slow &#x3D; slow-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hello-world-">&emsp; (二)判断单链表中是否存在环</h4>原理:类似于在操场上跑步，快指针的速度是慢指针移动速度的两倍，让两个指针都从链表头开始遍历，如果快指针最后指向空，则说明并没有环；如果最终快慢指针相等，则说明快指针追了上慢指针存在环。<p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bool JudgeCircle(LNode *head)&#123;</span><br><span class="line"></span><br><span class="line">​    if(head&#x3D;&#x3D;NULL)  return false;</span><br><span class="line"></span><br><span class="line">​    LNode *slow &#x3D; head;</span><br><span class="line"></span><br><span class="line">​    LNode *fast &#x3D; head;</span><br><span class="line"></span><br><span class="line">​    while(fast !&#x3D; NULL &amp;&amp; fast-&gt;next-&gt;next !&#x3D; NULL)&#123;</span><br><span class="line"></span><br><span class="line">​        slow &#x3D; slow-&gt;next;</span><br><span class="line"></span><br><span class="line">​        fast &#x3D; fast-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">​        if(slow &#x3D;&#x3D; fast) return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​    return false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hello-world-">&emsp; (三)判断两个单链表是否相交</h4>原理:首先利用快慢指针判断链表是否存在环。<p> (1)如果都不存在环，则如果两个单向链表有公共节点，也就是两个链表从某一节点开始，他们的p-&gt;next都指向同一个节点，每个节点只有一个p-&gt;next。因此从第一个公共节点开始，之后它们所有节点都是重合的。因此，首先两个链表各遍历一次，求出两个链表的长度L1、L2，然后可以得到它们的长度差L。然后现在长的链表上遍历L个节点，之后再同步遍历，于是在遍历中，第一个相同的节点就是第一个公共的节点。此时，若两个链表长度分别为M，N,则时间复杂度为O(M+N).</p><p> (2)如果一个存在环，另外一个不存在环，则这两个链表是不可能相交的。</p><p> (3)如果利用快慢指针发现两个链表都存在环，则判断任意一个链表上快慢指针相遇的那个节点，在不在另外一个链表上，如果在，则相交，不在，则不相交。</p><p>第一种情况实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">void Intersect(LinkList L1, LinkList L2) &#123;</span><br><span class="line">    if (L1 &#x3D;&#x3D; NULL || L2 &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    LinkList p &#x3D; L1;</span><br><span class="line">    LinkList q &#x3D; L2;</span><br><span class="line">    int length1 &#x3D; 0;</span><br><span class="line">    int length2 &#x3D; 0;</span><br><span class="line">    int len &#x3D; 0;</span><br><span class="line"></span><br><span class="line">while (p-&gt;next) &#123;</span><br><span class="line">    length1 ++;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">while (q-&gt;next) &#123;</span><br><span class="line">    length2 ++;</span><br><span class="line">    q &#x3D; q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;p&lt;&lt;q;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;length1&lt;&lt;length2;</span><br><span class="line"></span><br><span class="line">if (p &#x3D;&#x3D; q) &#123;</span><br><span class="line">    cout&lt;&lt;&quot;相交&quot;;</span><br><span class="line">if (length1 &gt; length2) &#123;</span><br><span class="line">    len &#x3D; length1 - length2;</span><br><span class="line">    p &#x3D; L2;</span><br><span class="line">    q &#x3D; L1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    len &#x3D; length2 - length1;</span><br><span class="line">    p &#x3D; L1;</span><br><span class="line">    q &#x3D; L2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (len) &#123;</span><br><span class="line">    q &#x3D; q-&gt;next;</span><br><span class="line">    len--;</span><br><span class="line">&#125;</span><br><span class="line">while (p !&#x3D; q) &#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    q &#x3D; q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;p-&gt;data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else &#123;</span><br><span class="line">    cout&lt;&lt;&quot;不相交&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hello-world-">&emsp;总结</h3>上边的题是我在写LeetCode的时候发现挺有意思的就做了个汇总（当然还有一些其他的题目我想了好久，后边有时间再写），类似的题目还有寻找环的入口以及输出链表中倒数第K个节点。原理其实都差不多所以这两个题我就没有写上来。（参考来源于csdn,博客园,百度百科）]]></content>
      
      
      
        <tags>
            
            <tag> 快慢指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国庆前夕之学习历程</title>
      <link href="/2019/09/29/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/09/29/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h6 id="hello-world-">&emsp;  刚学完数据结构的第二章，今天在写“回文链表”时遇到一点问题。<a id="more"></a></h6><hr><p>&emsp;&emsp;我的思路如下：用一个头指针head和一个尾指针tail，头指针向前移动head++，尾指针向后移动tail--,在这个过程中比较他们的值是否相等，如果不相等则返回false；如果相等则两个指针继续移动直至两个指针重合则返回true，说明它是回文链表，但是我编译运行之后并没有得到结果，我在想哪里出了问题，感觉思路没有问题，在看了代码之后我在想能不能用tail--逆向遍历链表呢，如果能逆向遍历那岂不是逆转链表特别容易了吗根本不用迭代和递归了，于是我去向别人求助查阅资料，得知链表中不能进行自增自减运算只能用p=p->next,我是感觉这两种一样，但为什么实际上不一样呢，然后我写了一个程序来验证。<br><br>&emsp;&emsp;程序测试结果表明，p++和p->next确实不一样，链表加1后不一定指向下一个节点，物理位置并没有连着。由于当时想到了线性表合并中两个指针的自增操作，把它带进了链表中，实际上顺序表是顺序存储结构，但链表并不是，所以p++并不等于p->next。<br></p><p>​       接着，说一下这几天写程序的感想。</p><p>​     《数据结构与算法》这本书非常重要，我们老师在给我们上课时讲到大二一定要过“编程关”，并建议我们每天花上一两个小时写程序。虽然我们是计算机科学与技术专业，编程能力的要求可能也没有软件工程要高，但是我觉得在学习中要以软件工程的标准来要求自己，有时间就去写写程序，量变达到质变，能力太重要啦。另外一点小小感悟，没事的时候就爱随便翻翻网站，今天逛了ccpc网络选拔赛和LeetCode的周赛排名榜，全国排名或者世界排名靠前的人基本上都是清华北大以及一些其他实力较强的985院校，像我所在的普通一本院校连报名的人都很少更别说获奖了，其实绝大多数人给我的感觉都不知道自己真正想要的是什么。可能差距从高考那一天就已经开始了，有时也会感悟，985院校真的会给你提供一个完全不一样的更高的平台。我也想好好努力，以考研为跳板去一个更高的平台，遇见更优秀的你和我！</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活琐事</title>
      <link href="/2019/09/12/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"/>
      <url>/2019/09/12/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="hello-world-">&emsp;生活碎片-1<a id="more"></a></h5><hr><p>&emsp;&emsp;最近喜欢上一句话“I love three things in the world,the sun,the moon and you，the sun for the day,the moon for the night,and you forever",我什么时候会对一个人说这样的话呢。<br><br>&emsp;&emsp;心情复杂，烦恼又急切，焦虑又难过。明明是18岁最好的年纪，总是感觉达不到自己的期望值。这学期java，数据结构，python，四种语言混着用还是挺怕自己有些地方混淆，虽然这学期课也挺少的但是事情是真的多，C语言过编程关，java，python都得一起学以及12月份的英语六级。有时候我会想，我为什么大学不选个师范院校的英语专业或者就听我爸学医以后就安安逸逸的过自己一生得了，非得执着于计算机，可能我骨子里就是这样不安定，爱挑战一些有难度，新鲜的事物。每完成一道编程大题我就有一种做完一道奥数题的感觉，这种成就感和快乐让我很享受。还有一件最最最令人难过的事情，刚刚称了一下体重，真的胖了好多！！我不能再这样吃下去了！从明天开始，我要让这些不愉快都留在2019年，以一个更好的姿态迎接2020年！迎接19岁更好的自己！生活还是需要很多仪式感的。给我冲！！！（前面说完这些话，心情真的好多了）哦对了，明天中秋节我先祝自己中秋节快乐，而且我买了星光音乐节的票有赵雷还有隔壁老樊等等等这些民谣歌手，虽然我表面看起来是个喜欢技术的人但我骨子里应该算是个文艺的人。今天就说到这吧，晚安！<br></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The first article</title>
      <link href="/2019/08/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/08/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;前几天在网上查资料的时候，看见别人的精美的博客页面，我寻思我可不可以也做一个自己的博客。说时迟，那时快，决定之后我立马就动手做了。<br><br>&emsp;&emsp;在CSDN，简书，博客园等的帮助下，我从在腾讯云上购买域名到注册github绑定域名，创建仓库，配置SSH key，修改主题，上传到github上等。这个过程中也遇到了一些问题（我也是算是小白中的小白了，这些东西都是第一次接触），多亏了互联网的强大，我才辛辛苦苦把我的个人网站搭建起来。虽然有一丝简陋，以后学习更多的新知识再改吧，拥有自己一小块地的感觉太好了（我可以为所欲为）。<br></p><p>&emsp;&emsp;这个博客以后主要是用来记录和总结我的学习以及生活，路漫漫其修远兮，吾将上下而求索！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
